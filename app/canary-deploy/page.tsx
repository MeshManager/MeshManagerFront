'use client';

import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { SidebarProvider, SidebarTrigger, useSidebar } from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/AppSidebar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Label as UiLabel } from '@/components/ui/label';

interface ContainerInfo {
  name: string;
  image: string;
}

interface DeploymentInfo {
  name: string;
  containers: ContainerInfo[];
  podLabels: Record<string, string>;
  replicas: number;
}

interface DeploymentListResponse {
  data: DeploymentInfo[];
}

interface NamespaceListResponse {
  namespaces: string[];
}

interface ServiceNameListResponse {
  serviceNames: string[];
}

interface ClusterInfo {
  uuid: string;
  name: string;
  agentConnected?: boolean;
}

interface CanaryDeployment {
  id: number;
  name: string;
  namespace: string;
  serviceType: string;
  ratio: number;
  commitHash: string[];
  darknessReleaseID?: number;
  dependencyID?: number[];
}

function SidebarToggleButton() {
  const { state } = useSidebar();

  const leftPosition = state === "expanded"
    ? `calc(16rem + 1rem)`
    : `1rem`;

  return (
    <div
      className="fixed top-4 z-50 transition-all duration-200 ease-linear"
      style={{ left: leftPosition }}
    >
      {state === "collapsed" && <SidebarTrigger />}
    </div>
  );
}

export default function CanaryDeployPage() {
  const router = useRouter();
  const { isLoggedIn, logout, isLoading } = useAuth();

  const [clusters, setClusters] = useState<ClusterInfo[]>([]);
  const [selectedClusterUuid, setSelectedClusterUuid] = useState<string | null>(null);
  const [availableNamespaces, setAvailableNamespaces] = useState<string[]>([]);
  const [selectedNamespace, setSelectedNamespace] = useState<string | null>(null);
  const [availableServices, setAvailableServices] = useState<string[]>([]);
  const [selectedService, setSelectedService] = useState<string | null>(null);
  const [availableVersions, setAvailableVersions] = useState<string[]>([]);
  const [originalVersion, setOriginalVersion] = useState<string | null>(null);
  const [canaryVersion, setCanaryVersion] = useState<string | null>(null);
  const [canaryRatio, setCanaryRatio] = useState<number[]>([10]); // Default to 10%
  const [stickySession, setStickySession] = useState<boolean>(false);
  const [deployments, setDeployments] = useState<DeploymentInfo[]>([]);
  const [currentCanaryDeployments, setCurrentCanaryDeployments] = useState<CanaryDeployment[]>([]);

  // CRD API URL Ï†ïÏùò
  const crdApiUrl = process.env.NEXT_PUBLIC_BACKEND_API_URL_CRD || 'http://localhost:8084';

  // ÌòÑÏû¨ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî Ìï®Ïàò (useCallbackÏúºÎ°ú Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò)
  const fetchCurrentCanaryDeployments = React.useCallback(async () => {
    if (!selectedClusterUuid) {
      setCurrentCanaryDeployments([]);
      return;
    }
    
    try {
      console.log('üîç Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ù Ï°∞Ìöå ÏãúÏûë:', selectedClusterUuid);
      const response = await fetch(`${crdApiUrl}/api/v1/crd/${selectedClusterUuid}/list`);
      
      console.log('üì° ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.statusText);
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è CRD API ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ùÏù¥ ÎπÑÏñ¥ÏûàÏùÑ Ïàò ÏûàÏäµÎãàÎã§.');
          setCurrentCanaryDeployments([]);
          return;
        }
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('üìã Ï†ÑÏ≤¥ ÏùëÎãµ:', result);
      
      // API ÏùëÎãµ Íµ¨Ï°∞ ÏàòÏ†ï: result.result.serviceEntityID ÌòïÌÉúÎ°ú Î≥ÄÍ≤Ω
      const serviceEntityIDs = result?.result?.serviceEntityID || result?.data?.serviceEntityID || [];
      
      if (Array.isArray(serviceEntityIDs) && serviceEntityIDs.length > 0) {
        console.log('üìä ServiceEntity IDs:', serviceEntityIDs);
        
        const entityDetailsPromises = serviceEntityIDs.map(async (entityId: number) => {
          try {
            console.log(`üîç Entity ${entityId} ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå...`);
            const entityResponse = await fetch(`${crdApiUrl}/api/v1/crd/service/${entityId}`);
            if (entityResponse.ok) {
              const entityResult = await entityResponse.json();
              console.log(`üìÑ Entity ${entityId} ÏùëÎãµ:`, entityResult);
              // API ÏùëÎãµ Íµ¨Ï°∞Ïóê ÎßûÍ≤å ÏàòÏ†ï
              const entityData = entityResult?.result || entityResult?.data;
              if (entityData) {
                return { id: entityId, ...entityData };
              }
            } else {
              console.warn(`‚ö†Ô∏è Entity ${entityId} Ï°∞Ìöå Ïã§Ìå®: ${entityResponse.status}`);
            }
          } catch (error) {
            console.error(`‚ùå Entity ${entityId} Ï°∞Ìöå Ïã§Ìå®:`, error);
          }
          return null;
        });
        
        const details = await Promise.all(entityDetailsPromises);
        const validEntities = details.filter(entity => entity !== null);
        console.log('‚úÖ Ïú†Ìö®Ìïú ServiceEntityÎì§:', validEntities);
        
        // CanaryTypeÍ≥º StandardType Íµ¨Î∂ÑÌïòÏó¨ Ï≤òÎ¶¨
        const canaryEntities = validEntities.filter(entity => 
          entity.serviceType === 'CanaryType' || entity.serviceType === 'StickyCanaryType'
        );
        const standardEntities = validEntities.filter(entity => entity.serviceType === 'StandardType');
        
        if (canaryEntities.length > 0) {
          const existingCanaryEntityIds = canaryEntities.map(entity => entity.id);
          console.log(`üóëÔ∏è ÏÇ≠Ï†úÌï† Canary/StickyCanary ServiceEntity IDs:`, existingCanaryEntityIds);
        }
        
        if (standardEntities.length > 0) {
          console.log(`üåë StandardType ServiceEntity Í∞êÏßÄ: ${standardEntities.length}Í∞ú (ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Ïú†ÏßÄ)`);
        }
        
        setCurrentCanaryDeployments(canaryEntities as CanaryDeployment[]);
      } else {
        console.log('üì≠ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ùÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.');
        setCurrentCanaryDeployments([]);
      }
    } catch (error) {
      console.error("‚ùå Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ù Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
      setCurrentCanaryDeployments([]);
      // 404 ÏóêÎü¨Í∞Ä ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º
      if (error instanceof Error && !error.message.includes('404')) {
        console.error('Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå® ÏÉÅÏÑ∏:', error.message);
      }
    }
  }, [selectedClusterUuid, crdApiUrl]);

  useEffect(() => {
    if (!isLoading && !isLoggedIn) {
      // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÎ•º Î°úÍ∑∏Ïù∏ ÌõÑ Î¶¨Îã§Ïù¥Î†âÏÖò ÎåÄÏÉÅÏúºÎ°ú Ï†ÄÏû•
      localStorage.setItem('redirectAfterLogin', '/canary-deploy');
      router.push('/login');
    }
  }, [isLoggedIn, isLoading, router]);

  // ÌÅ¥Îü¨Ïä§ÌÑ∞ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî useEffect
  useEffect(() => {
    const fetchClusters = async () => {
      try {
        const apiUrl = process.env.NEXT_PUBLIC_BACKEND_API_URL_CLUSTER || 'http://localhost:8082';
        const response = await fetch(`${apiUrl}/api/v1/cluster`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const result = await response.json();
        if (result && result.data) {
          const clustersWithAgent = result.data.map((cluster: ClusterInfo) => ({
            ...cluster,
            agentConnected: cluster.agentConnected ?? false
          }));
          setClusters(clustersWithAgent);
        } else {
          setClusters([]);
        }
      } catch (error) {
        console.error("Failed to fetch clusters:", error);
        setClusters([]);
      }
    };

    if (isLoggedIn) {
      fetchClusters();
    }
  }, [isLoggedIn]);

  // ÏÑ†ÌÉùÎêú ÌÅ¥Îü¨Ïä§ÌÑ∞Ïóê Îî∞Îùº ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const fetchNamespaces = async () => {
      if (!selectedClusterUuid) {
        setAvailableNamespaces([]);
        setSelectedNamespace(null);
        return;
      }
      
      try {
        const apiUrl = process.env.NEXT_PUBLIC_BACKEND_API_URL_CLUSTER || 'http://localhost:8082';
        const response = await fetch(`${apiUrl}/api/v1/cluster/namespaces?clusterId=${selectedClusterUuid}`);
        if (!response.ok) throw new Error('ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        
        const data: NamespaceListResponse = await response.json();
        setAvailableNamespaces(data.namespaces);
        setSelectedNamespace(null);
        setSelectedService(null);
        setOriginalVersion(null);
        setCanaryVersion(null);
      } catch (error) {
        console.error('ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
        setAvailableNamespaces([]);
      }
    };

    fetchNamespaces();
  }, [selectedClusterUuid]);

  // ÏÑ†ÌÉùÎêú ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Ïóê Îî∞Îùº ÏÑúÎπÑÏä§ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const fetchServices = async () => {
      if (!selectedClusterUuid || !selectedNamespace) {
        setAvailableServices([]);
        setSelectedService(null);
        return;
      }
      
      try {
        const apiUrl = process.env.NEXT_PUBLIC_BACKEND_API_URL_CLUSTER || 'http://localhost:8082';
        const response = await fetch(`${apiUrl}/api/v1/cluster/services?clusterId=${selectedClusterUuid}&namespace=${selectedNamespace}`);
        if (!response.ok) throw new Error('ÏÑúÎπÑÏä§ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        
        const data: ServiceNameListResponse = await response.json();
        setAvailableServices(data.serviceNames.filter(serviceName => serviceName !== 'kubernetes'));
        setSelectedService(null);
        setOriginalVersion(null);
        setCanaryVersion(null);
      } catch (error) {
        console.error('ÏÑúÎπÑÏä§ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
        setAvailableServices([]);
      }
    };

    fetchServices();
  }, [selectedClusterUuid, selectedNamespace]);

  // ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïóê Îî∞Îùº ÎîîÌîåÎ°úÏù¥Î®ºÌä∏ Ï†ïÎ≥¥ Î∞è Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const fetchDeployments = async () => {
      if (!selectedClusterUuid || !selectedNamespace || !selectedService) {
        setDeployments([]);
        setAvailableVersions([]);
        setOriginalVersion(null);
        setCanaryVersion(null);
        return;
      }
      
      try {
        const apiUrl = process.env.NEXT_PUBLIC_BACKEND_API_URL_CLUSTER || 'http://localhost:8082';
        const response = await fetch(`${apiUrl}/api/v1/cluster/deployments?clusterId=${selectedClusterUuid}&namespace=${selectedNamespace}&serviceName=${selectedService}`);
        if (!response.ok) throw new Error('ÎîîÌîåÎ°úÏù¥Î®ºÌä∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        
        const data: DeploymentListResponse = await response.json();
        setDeployments(data.data);
        
        // Ïª®ÌÖåÏù¥ÎÑà Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ÏóêÏÑú version Ï∂îÏ∂ú (Îã§ÌÅ¨Î¶¥Î¶¨Ï¶àÏôÄ ÎèôÏùºÌïú Î∞©Ïãù)
        const versions = new Set<string>();
        if (data.data && Array.isArray(data.data)) {
          data.data.forEach((deployment) => {
            if (deployment.containers && Array.isArray(deployment.containers)) {
              deployment.containers.forEach((container) => {
                if (container.image) {
                  const imageTag = container.image.split(':')[1] || 'latest';
                  versions.add(imageTag);
                }
              });
            }
          });
        }
        
        setAvailableVersions(Array.from(versions));
        setOriginalVersion(null);
        setCanaryVersion(null);
      } catch (error) {
        console.error('ÎîîÌîåÎ°úÏù¥Î®ºÌä∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
        setDeployments([]);
        setAvailableVersions([]);
      }
    };

    fetchDeployments();
  }, [selectedClusterUuid, selectedNamespace, selectedService]);

  // ÌòÑÏû¨ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî useEffect - ÌÅ¥Îü¨Ïä§ÌÑ∞ Î≥ÄÍ≤Ω ÏãúÏóêÎßå Ìò∏Ï∂ú
  useEffect(() => {
    // Ï¥àÍ∏∞ Î°úÎî©Ïù¥ ÏôÑÎ£åÎêòÍ≥† ÌÅ¥Îü¨Ïä§ÌÑ∞Í∞Ä ÏÑ†ÌÉùÎêòÏóàÏùÑ ÎïåÎßå Ìò∏Ï∂ú
    if (selectedClusterUuid) {
      fetchCurrentCanaryDeployments();
    }
  }, [selectedClusterUuid]); // eslint-disable-line react-hooks/exhaustive-deps
  // ÏùòÎèÑÏ†ÅÏúºÎ°ú fetchCurrentCanaryDeploymentsÎ•º ÏùòÏ°¥ÏÑ±ÏóêÏÑú Ï†úÏô∏ÌïòÏó¨ Î¨¥Ìïú Ìò∏Ï∂ú Î∞©ÏßÄ

  // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïùò Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏
  const currentServiceCanaryDeployment = React.useMemo(() => {
    if (!selectedService || !selectedNamespace || !currentCanaryDeployments) {
      return null;
    }
    return currentCanaryDeployments.find(
      deployment => deployment.name === selectedService && deployment.namespace === selectedNamespace
    );
  }, [selectedService, selectedNamespace, currentCanaryDeployments]);

  // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïùò Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå ÎπÑÏú® Ïä¨ÎùºÏù¥Îçî ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (currentServiceCanaryDeployment && currentServiceCanaryDeployment.ratio !== undefined) {
      setCanaryRatio([currentServiceCanaryDeployment.ratio]);
    }
  }, [currentServiceCanaryDeployment]);

  const handleLogout = () => {
    logout();
  };

  // Î°úÎî© Ï§ëÏùº ÎïåÎäî ÏïÑÎ¨¥Í≤ÉÎèÑ Î†åÎçîÎßÅÌïòÏßÄ ÏïäÏùå
  if (isLoading) {
    return null;
  }

  // Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ ÏïÑÎ¨¥Í≤ÉÎèÑ Î†åÎçîÎßÅÌïòÏßÄ ÏïäÍ≥† Î¶¨Îã§Ïù¥Î†âÏÖòÏùÑ Í∏∞Îã§Î¶º
  if (!isLoggedIn) {
    return null;
  }

  const handleDeploy = async () => {
    if (!selectedClusterUuid || !selectedNamespace || !selectedService || !originalVersion || !canaryVersion || canaryRatio[0] === undefined) {
      alert("Î™®Îì† ÌïÑÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    // CommitHash Í∞úÏàò Í≤ÄÏ¶ù (2Í∞ú ÎØ∏ÎßåÏù¥Î©¥ Canary Î∞∞Ìè¨ Î∂àÍ∞Ä)
    const allVersions = new Set([originalVersion, canaryVersion]);
    if (allVersions.size < 2) {
      alert("Canary Î∞∞Ìè¨Î•º ÏúÑÌï¥ÏÑúÎäî ÏµúÏÜå 2Í∞úÏùò ÏÑúÎ°ú Îã§Î•∏ Î≤ÑÏ†ÑÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
      return;
    }

    try {
      // 1Îã®Í≥Ñ: GET - Í∏∞Ï°¥ ServiceEntity ÌôïÏù∏
      console.log('üîç 1Îã®Í≥Ñ: Í∏∞Ï°¥ ServiceEntity ÌôïÏù∏...');
      let existingCanaryEntityIds: number[] = [];
      let hasStandardDeployment = false;
      
      try {
        const existingListResponse = await fetch(`${crdApiUrl}/api/v1/crd/${selectedClusterUuid}/list`);
        if (existingListResponse.ok) {
          const existingListResult = await existingListResponse.json();
          console.log('üìã Í∏∞Ï°¥ ServiceEntity Î™©Î°ù:', existingListResult);
          
          const serviceEntityIDs = existingListResult?.result?.serviceEntityID || existingListResult?.data?.serviceEntityID || [];
          
          if (Array.isArray(serviceEntityIDs) && serviceEntityIDs.length > 0) {
            // Í∞ôÏùÄ ÏÑúÎπÑÏä§ Ïù¥Î¶ÑÍ≥º ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Î•º Í∞ÄÏßÑ ServiceEntity Ï∞æÍ∏∞
            const entityCheckPromises = serviceEntityIDs.map(async (entityId: number) => {
              try {
                const entityResponse = await fetch(`${crdApiUrl}/api/v1/crd/service/${entityId}`);
                if (entityResponse.ok) {
                  const entityResult = await entityResponse.json();
                  const entityData = entityResult?.result || entityResult?.data;
                  
                  if (entityData && 
                      entityData.name === selectedService && 
                      entityData.namespace === selectedNamespace) {
                    
                    if (entityData.serviceType === 'CanaryType' || entityData.serviceType === 'StickyCanaryType') {
                      console.log(`üöÄ Ï§ëÎ≥µ ${entityData.serviceType} ServiceEntity Î∞úÍ≤¨: ID ${entityId}`, entityData);
                      return { id: entityId, type: entityData.serviceType };
                    } else if (entityData.serviceType === 'StandardType') {
                      console.log(`üåë Í∏∞Ï°¥ StandardType ServiceEntity Î∞úÍ≤¨: ID ${entityId} (Dark ReleaseÏö©, Í±¥ÎìúÎ¶¨ÏßÄ ÏïäÏùå)`, entityData);
                      return { id: entityId, type: 'StandardType' };
                    }
                  }
                }
              } catch (error) {
                console.error(`‚ùå Entity ${entityId} Ï°∞Ìöå Ïã§Ìå®:`, error);
              }
              return null;
            });
            
            const foundEntities = (await Promise.all(entityCheckPromises)).filter(entity => entity !== null);
            
            // CanaryTypeÍ≥º StandardType Íµ¨Î∂ÑÌïòÏó¨ Ï≤òÎ¶¨
            const canaryEntities = foundEntities.filter(entity => 
              entity.type === 'CanaryType' || entity.type === 'StickyCanaryType'
            );
            const standardEntities = foundEntities.filter(entity => entity.type === 'StandardType');
            
            if (canaryEntities.length > 0) {
              existingCanaryEntityIds = canaryEntities.map(entity => entity.id);
              console.log(`üóëÔ∏è ÏÇ≠Ï†úÌï† Canary/StickyCanary ServiceEntity IDs:`, existingCanaryEntityIds);
            }
            
            if (standardEntities.length > 0) {
              hasStandardDeployment = true;
              console.log(`üåë StandardType ServiceEntity Í∞êÏßÄ: ${standardEntities.length}Í∞ú (ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Ïú†ÏßÄ)`);
            }
          }
        } else {
          console.warn(`‚ö†Ô∏è CRD Î™©Î°ù Ï°∞Ìöå Ïã§Ìå® (${existingListResponse.status})`);
        }
      } catch (error) {
        console.error('‚ùå Í∏∞Ï°¥ ServiceEntity ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error);
      }

      // 2Îã®Í≥Ñ: DELETE - Í∏∞Ï°¥ CanaryType ServiceEntityÎì§Îßå ÏÇ≠Ï†ú (StandardTypeÏùÄ Ïú†ÏßÄ)
      if (existingCanaryEntityIds.length > 0) {
        console.log(`üóëÔ∏è 2Îã®Í≥Ñ: ${existingCanaryEntityIds.length}Í∞úÏùò Canary/StickyCanary ServiceEntity ÏÇ≠Ï†ú (StandardTypeÏùÄ Ïú†ÏßÄ)...`);
        
        for (const entityId of existingCanaryEntityIds) {
          try {
            console.log(`üóëÔ∏è Canary/StickyCanary ServiceEntity ${entityId} ÏÇ≠Ï†ú ÏãúÎèÑ...`);
            const deleteResponse = await fetch(`${crdApiUrl}/api/v1/crd/service/${entityId}`, {
              method: 'DELETE',
            });
            
            if (deleteResponse.ok) {
              console.log(`‚úÖ Canary/StickyCanary ServiceEntity ${entityId} ÏÇ≠Ï†ú ÏÑ±Í≥µ`);
            } else {
              const errorText = await deleteResponse.text();
              console.error(`‚ùå Canary/StickyCanary ServiceEntity ${entityId} ÏÇ≠Ï†ú Ïã§Ìå®:`, errorText);
              console.warn(`‚ö†Ô∏è ServiceEntity ÏÇ≠Ï†ú Ïã§Ìå®ÌñàÏßÄÎßå Î∞∞Ìè¨Î•º Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§.`);
            }
          } catch (error) {
            console.error(`‚ùå Canary/StickyCanary ServiceEntity ${entityId} ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò:`, error);
            console.warn(`‚ö†Ô∏è ServiceEntity ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏßÄÎßå Î∞∞Ìè¨Î•º Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§.`);
          }
        }
        
        // ÏÇ≠Ï†ú ÌõÑ Ïû†Ïãú ÎåÄÍ∏∞ (DB Ï†ïÎ¶¨ ÏãúÍ∞Ñ ÌôïÎ≥¥)
        console.log('‚è≥ ÏÇ≠Ï†ú ÏôÑÎ£å ÌõÑ ÎåÄÍ∏∞ Ï§ë...');
        await new Promise(resolve => setTimeout(resolve, 1500));
      } else {
        console.log('‚úÖ Ï§ëÎ≥µÎêòÎäî Canary/StickyCanary ServiceEntity ÏóÜÏùå');
        if (hasStandardDeployment) {
          console.log('üåë StandardTypeÍ≥º ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Canary/StickyCanary ÏÉùÏÑ±');
        }
      }

      // 3Îã®Í≥Ñ: POST - ÏÉàÎ°úÏö¥ ServiceEntity ÏÉùÏÑ±
      console.log('üÜï 3Îã®Í≥Ñ: ÏÉàÎ°úÏö¥ ServiceEntity ÏÉùÏÑ±...');
      const serviceEntityType: string = stickySession ? 'StickyCanaryType' : 'CanaryType';
      console.log(`üìã ServiceType ÏÑ§Ï†ï: ${serviceEntityType} (Sticky Session: ${stickySession})`);
      
      const serviceEntityResponseList = await fetch(`${crdApiUrl}/api/v1/crd/${selectedClusterUuid}/serviceEntity`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: selectedService,
          namespace: selectedNamespace,
          serviceType: serviceEntityType,
          ratio: canaryRatio[0], // ratio ÌïÑÎìú Ï∂îÍ∞Ä
          commitHash: [originalVersion, canaryVersion]
        })
      });

      if (!serviceEntityResponseList.ok) {
        const errorText = await serviceEntityResponseList.text();
        console.error('ServiceEntity ÏÉùÏÑ± ÏóêÎü¨ ÏùëÎãµ:', errorText);
        throw new Error(`ServiceEntity ÏÉùÏÑ± Ïã§Ìå®! status: ${serviceEntityResponseList.status}, ÏùëÎãµ: ${errorText}`);
      }

      const serviceEntityResultList = await serviceEntityResponseList.json();
      console.log('üéØ ServiceEntity ÏùëÎãµ Ï†ÑÏ≤¥ Íµ¨Ï°∞:', JSON.stringify(serviceEntityResultList, null, 2));
      
      // ÏïàÏ†ÑÌïú ID Ï∂îÏ∂ú Î°úÏßÅ
      let serviceEntityId = null;
      
      // Îã§ÏñëÌïú ÏùëÎãµ Íµ¨Ï°∞Ïóê ÎåÄÏùë
      if (serviceEntityResultList.data) {
        serviceEntityId = serviceEntityResultList.data.ID || serviceEntityResultList.data.id;
        console.log('üìç dataÏóêÏÑú ID Ï∂îÏ∂ú:', serviceEntityId);
      } else if (serviceEntityResultList.result) {
        serviceEntityId = serviceEntityResultList.result.ID || serviceEntityResultList.result.id;
        console.log('üìç resultÏóêÏÑú ID Ï∂îÏ∂ú:', serviceEntityId);
      } else if (serviceEntityResultList.ID || serviceEntityResultList.id) {
        serviceEntityId = serviceEntityResultList.ID || serviceEntityResultList.id;
        console.log('üìç ÏµúÏÉÅÏúÑÏóêÏÑú ID Ï∂îÏ∂ú:', serviceEntityId);
      }

      console.log('üÜî ÏµúÏ¢Ö Ï∂îÏ∂úÎêú ServiceEntity ID:', serviceEntityId);

      if (!serviceEntityId) {
        console.error('‚ùå ID Ï∂îÏ∂ú Ïã§Ìå®. ÏùëÎãµ Íµ¨Ï°∞ Î∂ÑÏÑù:');
        console.error('- data:', serviceEntityResultList.data);
        console.error('- result:', serviceEntityResultList.result);
        console.error('- Ï†ÑÏ≤¥ ÌÇ§Îì§:', Object.keys(serviceEntityResultList));
        throw new Error('ServiceEntity IDÎ•º Î∞õÏïÑÏò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§. Î∞±ÏóîÎìú ÏùëÎãµ Íµ¨Ï°∞Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
      }

      alert(`Canary Î∞∞Ìè¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÎêòÏóàÏäµÎãàÎã§!\n` +
            `ServiceEntity ID: ${serviceEntityId}\n` +
            `ÏÑúÎπÑÏä§: ${selectedService}\n` +
            `ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: ${selectedNamespace}\n` +
            `Ìä∏ÎûòÌîΩ ÎπÑÏú®: ${canaryRatio[0]}%\n` +
            `Î≤ÑÏ†Ñ: ${originalVersion} -> ${canaryVersion}\n` +
            `${existingCanaryEntityIds.length > 0 ? `(Í∏∞Ï°¥ ${existingCanaryEntityIds.length}Í∞ú Ï§ëÎ≥µ Î∞∞Ìè¨ ÏÇ≠Ï†ú ÌõÑ ÏÉàÎ°ú ÏÉùÏÑ±Îê®)` : '(ÏÉàÎ°ú ÏÉùÏÑ±Îê®)'}\n` +
            `${hasStandardDeployment ? 'üåë Dark ReleaseÏôÄ ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Í≥µÏ°¥' : ''}`);
      
      // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ® (ÏßÄÏó∞ Ï∂îÍ∞Ä)
      setTimeout(() => {
        fetchCurrentCanaryDeployments();
      }, 1500);
    } catch (error) {
      console.error("Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏöîÏ≤≠ Ïã§Ìå®:", error);
      alert(`Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏöîÏ≤≠ Ïã§Ìå®: ${error instanceof Error ? error.message : String(error)}`);
    }
  };

  const handleRollback = async () => {
    if (!selectedClusterUuid || !selectedService || !selectedNamespace || currentCanaryDeployments.length === 0) {
      alert("Î°§Î∞±Ìï† Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Í∞Ä ÏóÜÏäµÎãàÎã§.");
      return;
    }

    const deploymentToRollback = currentCanaryDeployments.find(
      (dep) => dep.name === selectedService && dep.namespace === selectedNamespace
    );

    if (!deploymentToRollback) {
      alert("ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïóê ÎåÄÌïú Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
      return;
    }

    try {
      // 1Îã®Í≥Ñ: ServiceEntity Ï†ïÎ≥¥ Ï°∞Ìöå
      const listResponse = await fetch(`${crdApiUrl}/api/v1/crd/${selectedClusterUuid}/list`);
      if (!listResponse.ok) throw new Error('ServiceEntity Î™©Î°ù Ï°∞Ìöå Ïã§Ìå®');
      const listResult = await listResponse.json();

      // API ÏùëÎãµ Íµ¨Ï°∞ ÏàòÏ†ï
      const serviceEntityIDs = listResult?.result?.serviceEntityID || listResult?.data?.serviceEntityID || [];
      
      if (!Array.isArray(serviceEntityIDs) || serviceEntityIDs.length === 0) {
        alert("Î°§Î∞±Ìï† ServiceEntityÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
        return;
      }

      // 2Îã®Í≥Ñ: Ìï¥Îãπ ÏÑúÎπÑÏä§Ïùò ServiceEntity ID Ï∞æÍ∏∞
      let targetEntityId = null;
      for (const entityId of serviceEntityIDs) {
        try {
          const entityResponse = await fetch(`${crdApiUrl}/api/v1/crd/service/${entityId}`);
          if (entityResponse.ok) {
            const entityResult = await entityResponse.json();
            const entityData = entityResult?.result || entityResult?.data;
            if (entityData && entityData.name === selectedService && entityData.namespace === selectedNamespace) {
              targetEntityId = entityId;
              break;
            }
          }
        } catch (error) {
          console.error(`Entity ${entityId} Ï°∞Ìöå Ïã§Ìå®:`, error);
        }
      }

      if (!targetEntityId) {
        alert("Î°§Î∞±Ìï† ServiceEntityÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.");
        return;
      }

      // 3Îã®Í≥Ñ: ServiceEntity ÏÇ≠Ï†ú (Î°§Î∞±)
      const deleteResponse = await fetch(`${crdApiUrl}/api/v1/crd/service/${targetEntityId}`, {
        method: 'DELETE',
      });

      if (!deleteResponse.ok) {
        const errorText = await deleteResponse.text();
        throw new Error(`Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î°§Î∞± Ïã§Ìå®! status: ${deleteResponse.status}, ÏùëÎãµ: ${errorText}`);
      }

      alert("Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°§Î∞±ÎêòÏóàÏäµÎãàÎã§.");
      
      // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ® (ÏßÄÏó∞ Ï∂îÍ∞Ä)
      setTimeout(() => {
        fetchCurrentCanaryDeployments();
      }, 1000);
    } catch (error) {
      console.error("Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î°§Î∞± Ïã§Ìå®:", error);
      alert(`Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î°§Î∞± Ïã§Ìå®: ${error instanceof Error ? error.message : String(error)}`);
    }
  };

  const handleAgentDelete = async (canaryDeployment: CanaryDeployment) => {
    const confirmation = window.confirm(
      `'${canaryDeployment.name}' Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n` +
      `ÏÑúÎπÑÏä§: ${canaryDeployment.name}\n` +
      `ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: ${canaryDeployment.namespace}\n` +
      `ÌòÑÏû¨ ÎπÑÏú®: ${canaryDeployment.ratio}%`
    );
    
    if (!confirmation) {
      return;
    }

    try {
      console.log(`üóëÔ∏è ServiceEntity ÏÇ≠Ï†ú ÏãúÏûë: ID ${canaryDeployment.id}`);
      console.log(`üìã ÏÇ≠Ï†ú ÎåÄÏÉÅ Ï†ïÎ≥¥:`, canaryDeployment);

      const deleteResponse = await fetch(`${crdApiUrl}/api/v1/crd/service/${canaryDeployment.id}`, {
        method: 'DELETE',
      });

      console.log(`üì° ÏÇ≠Ï†ú ÏùëÎãµ ÏÉÅÌÉú: ${deleteResponse.status} ${deleteResponse.statusText}`);

      if (!deleteResponse.ok) {
        let errorMessage = `ÏÇ≠Ï†ú Ïã§Ìå®! status: ${deleteResponse.status}`;
        
        try {
          const errorText = await deleteResponse.text();
          console.log(`üìÑ ÏóêÎü¨ ÏùëÎãµ ÎÇ¥Ïö©:`, errorText);
          
          if (deleteResponse.status === 500) {
            errorMessage = `ÏÑúÎ≤Ñ ÎÇ¥Î∂Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.\n\n` +
                          `Ïù¥Îäî Î∞±ÏóîÎìúÏóêÏÑú ÏÇ≠Ï†ú Ï≤òÎ¶¨ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌïú Í≤ÉÏûÖÎãàÎã§.\n` +
                          `Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌïòÍ±∞ÎÇò Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.\n\n` +
                          `ÏÉÅÏÑ∏ Ïò§Î•ò: ${errorText}`;
          } else if (deleteResponse.status === 404) {
            errorMessage = `ÏÇ≠Ï†úÌïòÎ†§Îäî ServiceEntityÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.\n` +
                          `Ïù¥ÎØ∏ ÏÇ≠Ï†úÎêòÏóàÍ±∞ÎÇò Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî Î∞∞Ìè¨Ïùº Ïàò ÏûàÏäµÎãàÎã§.`;
          } else {
            errorMessage = `ÏÇ≠Ï†ú Ïã§Ìå®: ${errorText}`;
          }
        } catch (parseError) {
          console.error(`‚ùå ÏóêÎü¨ ÏùëÎãµ ÌååÏã± Ïã§Ìå®:`, parseError);
          errorMessage = `ÏÇ≠Ï†ú Ïã§Ìå®! HTTP ${deleteResponse.status}`;
        }

        throw new Error(errorMessage);
      }

      console.log(`‚úÖ ServiceEntity ${canaryDeployment.id} ÏÇ≠Ï†ú ÏÑ±Í≥µ`);
      alert(`Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ '${canaryDeployment.name}'Ïù¥(Í∞Ä) ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.`);
      
      // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ® (ÏßÄÏó∞ Ï∂îÍ∞Ä)
      setTimeout(() => {
        fetchCurrentCanaryDeployments();
      }, 1000);
      
    } catch (error) {
      console.error(`‚ùå Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò Î∞úÏÉù:`, error);
      alert(`Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú Ïã§Ìå®:\n\n${error instanceof Error ? error.message : String(error)}`);
    }
  };

  return (
    <div>
      <SidebarProvider>
        <AppSidebar />
        <SidebarToggleButton />

        <main className="flex-1 p-4 md:p-6">
          <div className="flex justify-end mb-4">
            <div className="group relative flex items-center">
              <Button variant="ghost" className="mr-2 cursor-pointer">user</Button>
              <Button variant="outline" onClick={handleLogout} className="absolute right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                Î°úÍ∑∏ÏïÑÏõÉ
              </Button>
            </div>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Canary Deploy</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <UiLabel htmlFor="cluster">ÌÅ¥Îü¨Ïä§ÌÑ∞</UiLabel>
                  <Select onValueChange={setSelectedClusterUuid} value={selectedClusterUuid || ''}>
                    <SelectTrigger id="cluster">
                      <SelectValue placeholder="ÌÅ¥Îü¨Ïä§ÌÑ∞ ÏÑ†ÌÉù" />
                    </SelectTrigger>
                    <SelectContent>
                      {(clusters || []).map(cluster => (
                        <SelectItem key={cluster.uuid} value={cluster.uuid}>{cluster.name}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <UiLabel htmlFor="namespace">ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§</UiLabel>
                  <Select onValueChange={setSelectedNamespace} value={selectedNamespace || ''} disabled={!selectedClusterUuid}>
                    <SelectTrigger id="namespace">
                      <SelectValue placeholder="ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏÑ†ÌÉù" />
                    </SelectTrigger>
                    <SelectContent>
                      {(availableNamespaces || []).map(ns => (
                        <SelectItem key={ns} value={ns}>{ns}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <UiLabel htmlFor="service">ÏÑúÎπÑÏä§</UiLabel>
                  <Select onValueChange={setSelectedService} value={selectedService || ''} disabled={!selectedNamespace}>
                    <SelectTrigger id="service">
                      <SelectValue placeholder="ÏÑúÎπÑÏä§ ÏÑ†ÌÉù" />
                    </SelectTrigger>
                    <SelectContent>
                      {(availableServices || []).map(svc => (
                        <SelectItem key={svc} value={svc}>{svc}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <UiLabel htmlFor="original-version">Ïπ¥ÎÇòÎ¶¨ Î≥¥ÎÇº Î≤ÑÏ†Ñ</UiLabel>
                  <Select onValueChange={setOriginalVersion} value={originalVersion || ''} disabled={!selectedService}>
                    <SelectTrigger id="original-version">
                      <SelectValue placeholder="Î≤ÑÏ†Ñ ÏÑ†ÌÉù" />
                    </SelectTrigger>
                    <SelectContent>
                      {(availableVersions || [])
                        .filter(version => version !== canaryVersion)
                        .map(version => (
                          <SelectItem 
                            key={version} 
                            value={version} 
                          >{version}</SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <UiLabel htmlFor="canary-version">Ïπ¥ÎÇòÎ¶¨ Î∞õÏùÑ Î≤ÑÏ†Ñ</UiLabel>
                  <Select onValueChange={setCanaryVersion} value={canaryVersion || ''} disabled={!selectedService || !originalVersion}>
                    <SelectTrigger id="canary-version">
                      <SelectValue placeholder="Î≤ÑÏ†Ñ ÏÑ†ÌÉù" />
                    </SelectTrigger>
                    <SelectContent>
                      {(availableVersions || [])
                        .filter(version => version !== originalVersion)
                        .map(version => (
                          <SelectItem 
                            key={version} 
                            value={version} 
                          >{version}</SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <UiLabel htmlFor="canary-ratio">Ïπ¥ÎÇòÎ¶¨ Ìä∏ÎûòÌîΩ ÎπÑÏú®: {canaryRatio[0]}%</UiLabel>
                  <Slider
                    id="canary-ratio"
                    min={0}
                    max={100}
                    step={5}
                    value={canaryRatio}
                    onValueChange={setCanaryRatio}
                    className="w-[60%]"
                  />
                </div>
              </div>

              <div className="flex items-center space-x-2">
                <Switch
                  id="sticky-session"
                  checked={stickySession}
                  onCheckedChange={setStickySession}
                />
                <UiLabel htmlFor="sticky-session">Sticky Session ÌôúÏÑ±Ìôî</UiLabel>
              </div>

              {/* ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïùò Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÉÅÌÉú */}
              {selectedService && selectedNamespace && (
                <div className="mt-6 p-4 border rounded-lg bg-gray-50">
                  <h3 className="text-lg font-semibold mb-3">ÌòÑÏû¨ ÏÑúÎπÑÏä§ ÏÉÅÌÉú</h3>
                  {currentServiceCanaryDeployment ? (
                    <div className="space-y-3">
                      <div className="flex items-center gap-2">
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          üöÄ Canary Î∞∞Ìè¨ Ï§ë
                        </span>
                        <span className="text-sm text-gray-600">
                          ÎπÑÏú®: {currentServiceCanaryDeployment.ratio}%
                        </span>
                      </div>
                      
                      <div className="text-sm text-gray-600">
                        <p><strong>ÏÑúÎπÑÏä§:</strong> {currentServiceCanaryDeployment.name}</p>
                        <p><strong>ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§:</strong> {currentServiceCanaryDeployment.namespace}</p>
                        <p><strong>Î≤ÑÏ†Ñ:</strong> {currentServiceCanaryDeployment.commitHash?.join(' ‚Üí ') || 'N/A'}</p>
                        <p><strong>ÌÉÄÏûÖ:</strong> {currentServiceCanaryDeployment.serviceType}</p>
                      </div>

                      {/* ÎπÑÏú® ÏàòÏ†ï Ïä¨ÎùºÏù¥Îçî */}
                      <div className="space-y-2">
                        <UiLabel>ÎπÑÏú® ÏàòÏ†ï: {canaryRatio[0]}%</UiLabel>
                        <div className="flex items-center gap-4">
                          <Slider
                            min={0}
                            max={100}
                            step={5}
                            value={canaryRatio}
                            onValueChange={setCanaryRatio}
                            className="flex-1"
                          />
                          <Button 
                            size="sm" 
                            onClick={() => {
                              alert(
                                `ÎπÑÏú® ÏàòÏ†ïÏùÑ ÏúÑÌï¥ÏÑúÎäî ÏÉàÎ°ú Î∞∞Ìè¨Ìï¥Ï£ºÏÑ∏Ïöî.\n\n` +
                                `1. ÏïÑÎûò "ÏÇ≠Ï†ú" Î≤ÑÌäºÏùÑ ÎàåÎü¨ Í∏∞Ï°¥ Î∞∞Ìè¨Î•º ÏÇ≠Ï†úÌïòÏÑ∏Ïöî.\n` +
                                `2. ÏõêÌïòÎäî ÎπÑÏú®(${canaryRatio[0]}%)Î°ú "Î∞∞Ìè¨" Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÏÉàÎ°ú Î∞∞Ìè¨ÌïòÏÑ∏Ïöî.\n\n` +
                                `‚Äª Î∞±ÏóîÎìúÏóê PUT APIÍ∞Ä Íµ¨ÌòÑÎêòÎ©¥ Ï¶âÏãú ÏàòÏ†ïÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§.`
                              );
                            }}
                            disabled={canaryRatio[0] === currentServiceCanaryDeployment.ratio}
                          >
                            ÎπÑÏú® Ï†ÅÏö© (ÏïàÎÇ¥)
                          </Button>
                        </div>
                      </div>

                      {/* Î∞∞Ìè¨ Í¥ÄÎ¶¨ Î≤ÑÌäºÎì§ */}
                      <div className="flex gap-2 pt-2">
                        <Button 
                          variant="destructive" 
                          size="sm"
                          onClick={() => handleAgentDelete(currentServiceCanaryDeployment)}
                        >
                          üóëÔ∏è ÏÇ≠Ï†ú
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => {
                            setCanaryRatio([currentServiceCanaryDeployment.ratio]);
                          }}
                        >
                          ÌòÑÏû¨ ÎπÑÏú®Î°ú Î≥µÏõê
                        </Button>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-600">
                        ‚ö™ Canary Î∞∞Ìè¨ ÏóÜÏùå
                      </span>
                      <p className="text-sm text-gray-500 mt-2">
                        ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïóê ÌôúÏÑ±ÌôîÎêú Canary Î∞∞Ìè¨Í∞Ä ÏóÜÏäµÎãàÎã§.
                      </p>
                    </div>
                  )}
                </div>
              )}

              {/* ÌòÑÏû¨ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ù ÏÑπÏÖò */}
              {selectedClusterUuid && currentCanaryDeployments.length > 0 && (
                <div className="mt-6 space-y-4">
                  <hr className="my-4" />
                  <h3 className="text-lg font-semibold">ÌòÑÏû¨ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ù</h3>
                  
                  {currentCanaryDeployments.map((canaryDeployment, index) => (
                    <Card key={index} className="p-4 bg-blue-50">
                      <div className="flex justify-between items-start">
                        <div>
                          <h4 className="font-medium mb-2">
                            Service: {canaryDeployment.name} (ID: {canaryDeployment.id})
                          </h4>
                          <p className="text-sm text-gray-600 mb-1">
                            ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: {canaryDeployment.namespace}
                          </p>
                          <p className="text-sm text-gray-600 mb-1">
                            ÌÉÄÏûÖ: {canaryDeployment.serviceType}
                          </p>
                          <p className="text-sm text-gray-600 mb-1">
                            Ìä∏ÎûòÌîΩ ÎπÑÏú®: {canaryDeployment.ratio}%
                          </p>
                          <p className="text-sm text-gray-600 mb-2">
                            Î≤ÑÏ†Ñ: {canaryDeployment.commitHash ? canaryDeployment.commitHash.join(', ') : 'N/A'}
                          </p>
                        </div>
                        <Button 
                          variant="destructive" 
                          size="sm"
                          onClick={() => handleAgentDelete(canaryDeployment)}
                        >
                          ÏÇ≠Ï†ú
                        </Button>
                      </div>
                    </Card>
                  ))}
                </div>
              )}

              {/* Î¶¨ÏÜåÏä§ Ï†ïÎ≥¥ ÌëúÏãú ÏÑπÏÖò */}
              {deployments.length > 0 && (
                <div className="mt-6 space-y-4">
                  <hr className="my-4" />
                  <h3 className="text-lg font-semibold">Î¶¨ÏÜåÏä§ Ï†ïÎ≥¥</h3>
                  
                  {deployments.map((deployment, index) => (
                    <Card key={index} className="p-4">
                      <h4 className="font-medium mb-2">Deployment: {deployment.name}</h4>
                      <p className="text-sm text-gray-600 mb-2">Replicas: {deployment.replicas}</p>
                      
                      {deployment.containers && deployment.containers.length > 0 && (
                        <div className="mb-3">
                          <h5 className="font-medium text-sm mb-1">Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ≥¥</h5>
                          <ul className="list-disc pl-5 space-y-1 text-sm">
                            {deployment.containers.map((container, containerIndex) => (
                              <li key={containerIndex}>
                                <span className="font-medium">{container.name}</span>: {container.image}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}

                      {deployment.podLabels && Object.keys(deployment.podLabels).length > 0 && (
                        <div>
                          <h5 className="font-medium text-sm mb-1">Pod ÎùºÎ≤®</h5>
                          <ul className="list-disc pl-5 space-y-1 text-sm">
                            {Object.entries(deployment.podLabels).map(([key, value]) => (
                              <li key={key}>
                                <span className="font-medium">{key}</span>: {value}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </Card>
                  ))}
                </div>
              )}

              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={handleRollback} disabled={!selectedClusterUuid || !selectedNamespace || !selectedService}>
                  Î°§Î∞±
                </Button>
                <Button 
                  onClick={handleDeploy} 
                  disabled={!selectedClusterUuid || !selectedNamespace || !selectedService || !originalVersion || !canaryVersion || canaryRatio[0] === undefined}
                >
                  {currentServiceCanaryDeployment ? 'ÏóÖÎç∞Ïù¥Ìä∏' : 'Î∞∞Ìè¨'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </main>
      </SidebarProvider>
    </div>
  );
} 