'use client';

import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/contexts/AuthContext';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { SidebarProvider, SidebarTrigger, useSidebar } from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/AppSidebar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Label as UiLabel } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Plus, Trash2, Clock, TrendingUp } from 'lucide-react';

interface ContainerInfo {
  name: string;
  image: string;
}

interface DeploymentInfo {
  name: string;
  containers: ContainerInfo[];
  podLabels: Record<string, string>;
  replicas: number;
}

interface DeploymentListResponse {
  data: DeploymentInfo[];
}

interface NamespaceListResponse {
  namespaces: string[];
}

interface ServiceNameListResponse {
  serviceNames: string[];
}

interface ClusterInfo {
  uuid: string;
  name: string;
  agentConnected?: boolean;
}

interface RatioSchedule {
  delayMs: number;
  newRatio: number;
}

interface CanaryDeployment {
  id: number;
  name: string;
  namespace: string;
  serviceType: string;
  ratio: number;
  commitHash: string[];
  podScale?: boolean;
  ratioSchedules?: {triggerTime?: number; delayMs?: number; newRatio: number}[];
  darknessReleaseID?: number;
  dependencyID?: number[];
}

function SidebarToggleButton() {
  const { state } = useSidebar();

  const leftPosition = state === "expanded"
    ? `calc(16rem + 1rem)`
    : `1rem`;

  return (
    <div
      className="fixed top-4 z-50 transition-all duration-200 ease-linear"
      style={{ left: leftPosition }}
    >
      {state === "collapsed" && <SidebarTrigger />}
    </div>
  );
}

export default function CanaryDeployPage() {
  const router = useRouter();
  const { isLoggedIn, logout, isLoading } = useAuth();

  const [clusters, setClusters] = useState<ClusterInfo[]>([]);
  const [selectedClusterUuid, setSelectedClusterUuid] = useState<string | null>(null);
  const [availableNamespaces, setAvailableNamespaces] = useState<string[]>([]);
  const [selectedNamespace, setSelectedNamespace] = useState<string | null>(null);
  const [availableServices, setAvailableServices] = useState<string[]>([]);
  const [selectedService, setSelectedService] = useState<string | null>(null);
  const [availableVersions, setAvailableVersions] = useState<string[]>([]);
  const [originalVersion, setOriginalVersion] = useState<string | null>(null);
  const [canaryVersion, setCanaryVersion] = useState<string | null>(null);
  const [canaryRatio, setCanaryRatio] = useState<number[]>([10]); // Default to 10%
  const [stickySession, setStickySession] = useState<boolean>(false);
  const [podScaleEnabled, setPodScaleEnabled] = useState<boolean>(false);
  const [deployments, setDeployments] = useState<DeploymentInfo[]>([]);
  const [currentCanaryDeployments, setCurrentCanaryDeployments] = useState<CanaryDeployment[]>([]);
  
  // RatioSchedule Í¥ÄÎ†® ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [ratioSchedules, setRatioSchedules] = useState<RatioSchedule[]>([]);
  const [enableSchedule, setEnableSchedule] = useState<boolean>(false);
  
  // CRD API URL Ï†ïÏùò
  const crdApiUrl = process.env.NEXT_PUBLIC_BACKEND_API_URL_CRD || 'http://localhost:8084';

  // ÏãúÍ∞ÑÏùÑ human-readable ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
  const formatDelay = (delayMs: number): string => {
    if (delayMs < 1000) return `${delayMs}ms`;
    if (delayMs < 60000) return `${delayMs / 1000}s`;
    if (delayMs < 3600000) return `${Math.floor(delayMs / 60000)}m ${Math.floor((delayMs % 60000) / 1000)}s`;
    return `${Math.floor(delayMs / 3600000)}h ${Math.floor((delayMs % 3600000) / 60000)}m`;
  };

  // ÌòÑÏû¨ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî Ìï®Ïàò (useCallbackÏúºÎ°ú Î©îÎ™®Ïù¥Ï†úÏù¥ÏÖò)
  const fetchCurrentCanaryDeployments = React.useCallback(async () => {
    if (!selectedClusterUuid) {
      setCurrentCanaryDeployments([]);
      return;
    }
    
    try {
      console.log('üîç Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ù Ï°∞Ìöå ÏãúÏûë:', selectedClusterUuid);
      const response = await fetch(`${crdApiUrl}/api/v1/crd/${selectedClusterUuid}/list`);
      
      console.log('üì° ÏùëÎãµ ÏÉÅÌÉú:', response.status, response.statusText);
      
      if (!response.ok) {
        if (response.status === 404) {
          console.warn('‚ö†Ô∏è CRD API ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ùÏù¥ ÎπÑÏñ¥ÏûàÏùÑ Ïàò ÏûàÏäµÎãàÎã§.');
          setCurrentCanaryDeployments([]);
          return;
        }
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('üìã Ï†ÑÏ≤¥ ÏùëÎãµ:', result);
      
      // API ÏùëÎãµ Íµ¨Ï°∞ ÏàòÏ†ï: result.result.serviceEntityID ÌòïÌÉúÎ°ú Î≥ÄÍ≤Ω
      const serviceEntityIDs = result?.result?.serviceEntityID || result?.data?.serviceEntityID || [];
      
      if (Array.isArray(serviceEntityIDs) && serviceEntityIDs.length > 0) {
        console.log('üìä ServiceEntity IDs:', serviceEntityIDs);
        
        const entityDetailsPromises = serviceEntityIDs.map(async (entityId: number) => {
          try {
            console.log(`üîç Entity ${entityId} ÏÉÅÏÑ∏ Ï†ïÎ≥¥ Ï°∞Ìöå...`);
            const entityResponse = await fetch(`${crdApiUrl}/api/v1/crd/service/${entityId}`);
            if (entityResponse.ok) {
              const entityResult = await entityResponse.json();
              console.log(`üìÑ Entity ${entityId} ÏùëÎãµ:`, entityResult);
              // API ÏùëÎãµ Íµ¨Ï°∞Ïóê ÎßûÍ≤å ÏàòÏ†ï
              const entityData = entityResult?.result || entityResult?.data;
              if (entityData) {
                return { id: entityId, ...entityData };
              }
            } else {
              console.warn(`‚ö†Ô∏è Entity ${entityId} Ï°∞Ìöå Ïã§Ìå®: ${entityResponse.status}`);
            }
          } catch (error) {
            console.error(`‚ùå Entity ${entityId} Ï°∞Ìöå Ïã§Ìå®:`, error);
          }
          return null;
        });
        
        const details = await Promise.all(entityDetailsPromises);
        const validEntities = details.filter(entity => entity !== null);
        console.log('‚úÖ Ïú†Ìö®Ìïú ServiceEntityÎì§:', validEntities);
        
        // CanaryTypeÍ≥º StandardType Íµ¨Î∂ÑÌïòÏó¨ Ï≤òÎ¶¨
        const canaryEntities = validEntities.filter(entity => 
          entity.serviceType === 'CanaryType' || entity.serviceType === 'StickyCanaryType'
        );
        const standardEntities = validEntities.filter(entity => entity.serviceType === 'StandardType');
        
        if (canaryEntities.length > 0) {
          const existingCanaryEntityIds = canaryEntities.map(entity => entity.id);
          console.log(`üóëÔ∏è ÏÇ≠Ï†úÌï† Canary/StickyCanary ServiceEntity IDs:`, existingCanaryEntityIds);
        }
        
        if (standardEntities.length > 0) {
          console.log(`üåë StandardType ServiceEntity Í∞êÏßÄ: ${standardEntities.length}Í∞ú (ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Ïú†ÏßÄ)`);
        }
        
        setCurrentCanaryDeployments(canaryEntities as CanaryDeployment[]);
      } else {
        console.log('üì≠ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ùÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.');
        setCurrentCanaryDeployments([]);
      }
    } catch (error) {
      console.error("‚ùå Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ù Ï°∞Ìöå Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
      setCurrentCanaryDeployments([]);
      // 404 ÏóêÎü¨Í∞Ä ÏïÑÎãå Í≤ΩÏö∞ÏóêÎßå ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º
      if (error instanceof Error && !error.message.includes('404')) {
        console.error('Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ù Ï°∞Ìöå Ïã§Ìå® ÏÉÅÏÑ∏:', error.message);
      }
    }
  }, [selectedClusterUuid, crdApiUrl]);

  // ÌòÑÏû¨ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî useEffect - fetchCurrentCanaryDeployments Ìï®Ïàò Ï†ïÏùò ÌõÑÏóê Î∞∞Ïπò
  useEffect(() => {
    // Ï¥àÍ∏∞ Î°úÎî©Ïù¥ ÏôÑÎ£åÎêòÍ≥† ÌÅ¥Îü¨Ïä§ÌÑ∞Í∞Ä ÏÑ†ÌÉùÎêòÏóàÏùÑ ÎïåÎßå Ìò∏Ï∂ú
    if (selectedClusterUuid) {
      fetchCurrentCanaryDeployments();
    }
  }, [selectedClusterUuid, fetchCurrentCanaryDeployments]);

  // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïùò Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÉÅÌÉú ÌôïÏù∏
  const currentServiceCanaryDeployment = React.useMemo((): CanaryDeployment | null => {
    if (!selectedService || !selectedNamespace || !currentCanaryDeployments) {
      return null;
    }
    return currentCanaryDeployments.find(
      deployment => deployment.name === selectedService && deployment.namespace === selectedNamespace
    ) || null;
  }, [selectedService, selectedNamespace, currentCanaryDeployments]);

  // RatioSchedule Í¥ÄÎ†® Ìï®ÏàòÎì§
  const addRatioSchedule = () => {
    if (ratioSchedules.length >= 100) {
      alert("ÏµúÎåÄ 100Í∞úÍπåÏßÄÎßå Ïä§ÏºÄÏ§ÑÏùÑ Ï∂îÍ∞ÄÌï† Ïàò ÏûàÏäµÎãàÎã§.");
      return;
    }
    
    setRatioSchedules([...ratioSchedules, { delayMs: 10000, newRatio: 50 }]);
  };

  const removeRatioSchedule = (index: number) => {
    setRatioSchedules(ratioSchedules.filter((_, i) => i !== index));
  };

  const updateRatioSchedule = (index: number, field: keyof RatioSchedule, value: number) => {
    const updated = [...ratioSchedules];
    updated[index] = { ...updated[index], [field]: value };
    setRatioSchedules(updated);
  };

  const handleLogout = () => {
    logout();
  };

  // Ïä§ÏºÄÏ§Ñ Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
  const validateSchedules = (): string | null => {
    if (!enableSchedule || ratioSchedules.length === 0) return null;
    
    for (const schedule of ratioSchedules) {
      if (schedule.delayMs <= 0) {
        return "ÏßÄÏó∞ ÏãúÍ∞ÑÏùÄ 0Î≥¥Îã§ Ïª§Ïïº Ìï©ÎãàÎã§.";
      }
      if (schedule.newRatio < 0 || schedule.newRatio > 100) {
        return "ÎπÑÏú®ÏùÄ 0-100 ÏÇ¨Ïù¥Ïó¨Ïïº Ìï©ÎãàÎã§.";
      }
    }
    
    // Ï§ëÎ≥µ ÏãúÍ∞Ñ Ï≤¥ÌÅ¨
    const delays = ratioSchedules.map(s => s.delayMs);
    const uniqueDelays = new Set(delays);
    if (delays.length !== uniqueDelays.size) {
      return "Ï§ëÎ≥µÎêú ÏßÄÏó∞ ÏãúÍ∞ÑÏù¥ ÏûàÏäµÎãàÎã§.";
    }
    
    return null;
  };

  const handleDeploy = async () => {
    // Ïä§ÏºÄÏ§Ñ Ïú†Ìö®ÏÑ± Í≤ÄÏ¶ù
    const validationError = validateSchedules();
    if (validationError) {
      alert(`Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ï Ïò§Î•ò: ${validationError}`);
      return;
    }

    if (!selectedClusterUuid || !selectedNamespace || !selectedService || !originalVersion || !canaryVersion || canaryRatio[0] === undefined) {
      alert("Î™®Îì† ÌïÑÎìúÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    // CommitHash Í∞úÏàò Í≤ÄÏ¶ù (2Í∞ú ÎØ∏ÎßåÏù¥Î©¥ Canary Î∞∞Ìè¨ Î∂àÍ∞Ä)
    const allVersions = new Set([originalVersion, canaryVersion]);
    if (allVersions.size < 2) {
      alert("Canary Î∞∞Ìè¨Î•º ÏúÑÌï¥ÏÑúÎäî ÏµúÏÜå 2Í∞úÏùò ÏÑúÎ°ú Îã§Î•∏ Î≤ÑÏ†ÑÏù¥ ÌïÑÏöîÌï©ÎãàÎã§.");
      return;
    }

    try {
      // 1Îã®Í≥Ñ: GET - Í∏∞Ï°¥ ServiceEntity ÌôïÏù∏ (Canary ‚Üí Canary ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨)
      console.log('üîç 1Îã®Í≥Ñ: Í∏∞Ï°¥ ServiceEntity ÌôïÏù∏ (Canary ‚Üí Canary ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨)...');
      let existingCanaryEntityIds: number[] = [];
      let hasStandardDeployment = false;
      
      try {
        const existingListResponse = await fetch(`${crdApiUrl}/api/v1/crd/${selectedClusterUuid}/list`);
        if (existingListResponse.ok) {
          const existingListResult = await existingListResponse.json();
          console.log('üìã Í∏∞Ï°¥ ServiceEntity Î™©Î°ù:', existingListResult);
          
          const serviceEntityIDs = existingListResult?.result?.serviceEntityID || existingListResult?.data?.serviceEntityID || [];
          
          if (Array.isArray(serviceEntityIDs) && serviceEntityIDs.length > 0) {
            // Í∞ôÏùÄ ÏÑúÎπÑÏä§ Ïù¥Î¶ÑÍ≥º ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Î•º Í∞ÄÏßÑ ServiceEntity Ï∞æÍ∏∞
            const entityCheckPromises = serviceEntityIDs.map(async (entityId: number) => {
              try {
                const entityResponse = await fetch(`${crdApiUrl}/api/v1/crd/service/${entityId}`);
                if (entityResponse.ok) {
                  const entityResult = await entityResponse.json();
                  const entityData = entityResult?.result || entityResult?.data;
                  
                  if (entityData && 
                      entityData.name === selectedService && 
                      entityData.namespace === selectedNamespace) {
                    
                    if (entityData.serviceType === 'CanaryType' || entityData.serviceType === 'StickyCanaryType') {
                      console.log(`üöÄ Í∏∞Ï°¥ ${entityData.serviceType} ServiceEntity Î∞úÍ≤¨: ID ${entityId} (ÏÇ≠Ï†ú ÌõÑ ÏÉàÎ°ú ÏÉùÏÑ± ÏòàÏ†ï)`, entityData);
                      return { 
                        id: entityId, 
                        type: entityData.serviceType,
                        commitHash: entityData.commitHash,
                        darknessReleaseID: entityData.darknessReleaseID
                      };
                    } else if (entityData.serviceType === 'StandardType') {
                      console.log(`üåë Í∏∞Ï°¥ StandardType ServiceEntity Î∞úÍ≤¨: ID ${entityId} (Dark ReleaseÏö©, Í±¥ÎìúÎ¶¨ÏßÄ ÏïäÏùå)`, entityData);
                      return { 
                        id: entityId, 
                        type: 'StandardType',
                        commitHash: entityData.commitHash,
                        darknessReleaseID: entityData.darknessReleaseID
                      };
                    }
                  }
                }
              } catch (error) {
                console.error(`‚ùå Entity ${entityId} Ï°∞Ìöå Ïã§Ìå®:`, error);
              }
              return null;
            });
            
            const foundEntities = (await Promise.all(entityCheckPromises)).filter(entity => entity !== null);
            
            // CanaryTypeÍ≥º StandardType Íµ¨Î∂ÑÌïòÏó¨ Ï≤òÎ¶¨
            const canaryEntities = foundEntities.filter(entity => 
              entity.type === 'CanaryType' || entity.type === 'StickyCanaryType'
            );
            const standardEntities = foundEntities.filter(entity => entity.type === 'StandardType');
            
            if (canaryEntities.length > 0) {
              existingCanaryEntityIds = canaryEntities.map(entity => entity.id);
              console.log(`üîÑ Canary ‚Üí Canary ÏóÖÎç∞Ïù¥Ìä∏ Í∞êÏßÄ: ${existingCanaryEntityIds.length}Í∞úÏùò Í∏∞Ï°¥ Canary/StickyCanary ServiceEntity ÏÇ≠Ï†ú ÌõÑ ÏÉàÎ°ú ÏÉùÏÑ±`);
            }
            
            if (standardEntities.length > 0) {
              hasStandardDeployment = true;
              console.log(`üåë StandardType ServiceEntity Í∞êÏßÄ: ${standardEntities.length}Í∞ú`);
              
              // StandardTypeÏù¥ DarkReleaseÍ∞Ä ÏïÑÎãå ÏùºÎ∞ò Î∞∞Ìè¨Ïù∏ Í≤ΩÏö∞ ÏÇ≠Ï†ú ÌôïÏù∏
              const standardDeploymentsToDelete = standardEntities.filter(entity => 
                !entity.darknessReleaseID || entity.darknessReleaseID === null
              );
              
              if (standardDeploymentsToDelete.length > 0) {
                const confirmDeleteStandard = confirm(
                  `'${selectedService}' ÏÑúÎπÑÏä§Ïóê ÏùºÎ∞ò Î∞∞Ìè¨Í∞Ä Ï°¥Ïû¨Ìï©ÎãàÎã§.\n` +
                  `Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Î•º ÏßÑÌñâÌïòÍ∏∞ ÏúÑÌï¥ Í∏∞Ï°¥ ÏùºÎ∞ò Î∞∞Ìè¨Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n` +
                  `ÏÇ≠Ï†úÌï† ÏùºÎ∞ò Î∞∞Ìè¨:\n` +
                  standardDeploymentsToDelete.map(standard => 
                    `- StandardType (Î≤ÑÏ†Ñ: ${standard.commitHash?.join(', ') || 'N/A'})`
                  ).join('\n') +
                  `\n\n‚Äª Îã§ÌÅ¨Î¶¥Î¶¨Ï¶àÍ∞Ä Ïó∞Í≤∞Îêú Î∞∞Ìè¨Îäî Ïú†ÏßÄÎê©ÎãàÎã§.`
                );
                
                if (!confirmDeleteStandard) {
                  throw new Error('ÏÇ¨Ïö©ÏûêÍ∞Ä ÏùºÎ∞ò Î∞∞Ìè¨ ÏÇ≠Ï†úÎ•º Ï∑®ÏÜåÌñàÏäµÎãàÎã§.');
                }
                
                console.log(`üóëÔ∏è ${standardDeploymentsToDelete.length}Í∞úÏùò ÏùºÎ∞ò Î∞∞Ìè¨ ÏÇ≠Ï†ú ÏßÑÌñâ`);
                
                for (const standardDeployment of standardDeploymentsToDelete) {
                  try {
                    console.log(`üóëÔ∏è ÏùºÎ∞ò Î∞∞Ìè¨ ÏÇ≠Ï†ú ÏãúÎèÑ: ID ${standardDeployment.id}`);
                    const deleteResponse = await fetch(`${crdApiUrl}/api/v1/crd/service/${standardDeployment.id}`, {
                      method: 'DELETE',
                    });

                    if (!deleteResponse.ok) {
                      const errorText = await deleteResponse.text();
                      console.error(`‚ùå ÏùºÎ∞ò Î∞∞Ìè¨ ${standardDeployment.id} ÏÇ≠Ï†ú Ïã§Ìå®:`, errorText);
                      throw new Error(`ÏùºÎ∞ò Î∞∞Ìè¨ ÏÇ≠Ï†ú Ïã§Ìå®: ${deleteResponse.status} - ${errorText}`);
                    }

                    const deleteResult = await deleteResponse.json();
                    console.log(`‚úÖ ÏùºÎ∞ò Î∞∞Ìè¨ ${standardDeployment.id} ÏÇ≠Ï†ú ÏôÑÎ£å:`, deleteResult);
                  } catch (error) {
                    console.error(`‚ùå ÏùºÎ∞ò Î∞∞Ìè¨ ${standardDeployment.id} ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò:`, error);
                    throw error;
                  }
                }
                
                // ÏùºÎ∞ò Î∞∞Ìè¨ ÏÇ≠Ï†ú ÌõÑ ÎåÄÍ∏∞
                console.log('‚è≥ ÏùºÎ∞ò Î∞∞Ìè¨ ÏÇ≠Ï†ú ÏôÑÎ£å ÌõÑ ÎåÄÍ∏∞ Ï§ë...');
                await new Promise(resolve => setTimeout(resolve, 1500));
              } else {
                console.log(`üåë Î™®Îì† StandardTypeÏù¥ DarkRelease Ïó∞Í≤∞Îê® - Ïú†ÏßÄ`);
              }
            }
          }
        } else {
          console.warn(`‚ö†Ô∏è CRD Î™©Î°ù Ï°∞Ìöå Ïã§Ìå® (${existingListResponse.status})`);
        }
      } catch (error) {
        console.error('‚ùå Í∏∞Ï°¥ ServiceEntity ÌôïÏù∏ Ï§ë Ïò§Î•ò:', error);
      }

      // 2Îã®Í≥Ñ: DELETE - Í∏∞Ï°¥ CanaryType ServiceEntityÎì§Îßå ÏÇ≠Ï†ú (StandardTypeÏùÄ Ïú†ÏßÄ)
      if (existingCanaryEntityIds.length > 0) {
        console.log(`üóëÔ∏è 2Îã®Í≥Ñ: Canary ‚Üí Canary ÏóÖÎç∞Ïù¥Ìä∏ - ${existingCanaryEntityIds.length}Í∞úÏùò Í∏∞Ï°¥ Canary/StickyCanary ServiceEntity ÏÇ≠Ï†ú (StandardTypeÏùÄ Ïú†ÏßÄ)...`);
        
        for (const entityId of existingCanaryEntityIds) {
          try {
            console.log(`üóëÔ∏è Í∏∞Ï°¥ Canary/StickyCanary ServiceEntity ${entityId} ÏÇ≠Ï†ú ÏãúÎèÑ...`);
            const deleteResponse = await fetch(`${crdApiUrl}/api/v1/crd/service/${entityId}`, {
              method: 'DELETE',
            });
            
            if (deleteResponse.ok) {
              console.log(`‚úÖ Í∏∞Ï°¥ Canary/StickyCanary ServiceEntity ${entityId} ÏÇ≠Ï†ú ÏÑ±Í≥µ`);
            } else {
              const errorText = await deleteResponse.text();
              console.error(`‚ùå Í∏∞Ï°¥ Canary/StickyCanary ServiceEntity ${entityId} ÏÇ≠Ï†ú Ïã§Ìå®:`, errorText);
              console.warn(`‚ö†Ô∏è ServiceEntity ÏÇ≠Ï†ú Ïã§Ìå®ÌñàÏßÄÎßå Î∞∞Ìè¨Î•º Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§.`);
            }
          } catch (error) {
            console.error(`‚ùå Í∏∞Ï°¥ Canary/StickyCanary ServiceEntity ${entityId} ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò:`, error);
            console.warn(`‚ö†Ô∏è ServiceEntity ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏßÄÎßå Î∞∞Ìè¨Î•º Í≥ÑÏÜç ÏßÑÌñâÌï©ÎãàÎã§.`);
          }
        }
        
        // ÏÇ≠Ï†ú ÌõÑ Ïû†Ïãú ÎåÄÍ∏∞ (DB Ï†ïÎ¶¨ ÏãúÍ∞Ñ ÌôïÎ≥¥)
        console.log('‚è≥ Í∏∞Ï°¥ Canary ÏÇ≠Ï†ú ÏôÑÎ£å ÌõÑ ÎåÄÍ∏∞ Ï§ë...');
        await new Promise(resolve => setTimeout(resolve, 1500));
      } else {
        console.log('‚úÖ Ï§ëÎ≥µÎêòÎäî Canary/StickyCanary ServiceEntity ÏóÜÏùå - ÏÉàÎ°ú ÏÉùÏÑ±');
        if (hasStandardDeployment) {
          console.log('üåë StandardTypeÍ≥º ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Canary/StickyCanary ÏÉùÏÑ±');
        }
      }

      // 3Îã®Í≥Ñ: POST - ÏÉàÎ°úÏö¥ ServiceEntity ÏÉùÏÑ±
      const deploymentType = existingCanaryEntityIds.length > 0 ? 'ÏóÖÎç∞Ïù¥Ìä∏ (Í∏∞Ï°¥ ÏÇ≠Ï†ú ÌõÑ ÏÉàÎ°ú ÏÉùÏÑ±)' : 'ÏÉàÎ°ú ÏÉùÏÑ±';
      console.log(`üÜï 3Îã®Í≥Ñ: ÏÉàÎ°úÏö¥ ServiceEntity ÏÉùÏÑ± - ${deploymentType}...`);
      
      // Î∞±ÏóîÎìú API ÌòïÏãùÏóê ÎßûÏ∂∞ Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
      const apiData = {
        name: selectedService,
        namespace: selectedNamespace,
        serviceType: stickySession ? "StickyCanaryType" : "CanaryType",
        ratio: canaryRatio[0],
        commitHash: [originalVersion, canaryVersion],
        podScale: podScaleEnabled,
        // delayMsÎ•º triggerTime(Ï†àÎåÄÏãúÍ∞Ñ)ÏúºÎ°ú Î≥ÄÌôò
        ratioSchedules: enableSchedule ? ratioSchedules.map(schedule => ({
          delayMs: schedule.delayMs, // Î∞±ÏóîÎìú ÏöîÏ≤≠ DTOÏóêÏÑúÎäî delayMs ÏÇ¨Ïö©
          newRatio: schedule.newRatio
        })) : []
      };

      console.log('üöÄ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:', apiData);

      const response = await fetch(`${crdApiUrl}/api/v1/crd/${selectedClusterUuid}/serviceEntity`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(apiData)
      });

      if (!response.ok) {
        throw new Error(`Î∞∞Ìè¨ ÏöîÏ≤≠ Ïã§Ìå®: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      console.log('‚úÖ Î∞∞Ìè¨ ÏÑ±Í≥µ:', result);
      
      alert(`Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!\n` +
            `${deploymentType}\n` +
            `ÏÑúÎπÑÏä§: ${selectedService}\n` +
            `ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: ${selectedNamespace}\n` +
            `ÌÉÄÏûÖ: ${stickySession ? 'StickyCanaryType' : 'CanaryType'}\n` +
            `Ìä∏ÎûòÌîΩ ÎπÑÏú®: ${canaryRatio[0]}%\n` +
            `Î≤ÑÏ†Ñ: ${originalVersion} ‚Üí ${canaryVersion}\n` +
            `${enableSchedule ? `Ïä§ÏºÄÏ§Ñ: ${ratioSchedules.length}Í∞ú ÏÑ§Ï†ïÎê®` : 'Ïä§ÏºÄÏ§Ñ: ÏóÜÏùå'}\n` +
            `${existingCanaryEntityIds.length > 0 ? `(Í∏∞Ï°¥ ${existingCanaryEntityIds.length}Í∞ú Canary Î∞∞Ìè¨ ÏÇ≠Ï†ú ÌõÑ ÏÉàÎ°ú ÏÉùÏÑ±Îê®)` : '(ÏÉàÎ°ú ÏÉùÏÑ±Îê®)'}\n` +
            `${hasStandardDeployment ? 'üåë Dark ReleaseÏôÄ ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú Í≥µÏ°¥' : ''}`);
      
      // Î∞∞Ìè¨ ÌõÑ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      await fetchCurrentCanaryDeployments();
      
    } catch (error) {
      console.error("‚ùå Î∞∞Ìè¨ Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
      alert(`Î∞∞Ìè¨ Ïã§Ìå®: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
    }
  };

  const handleRollback = async () => {
    if (!currentServiceCanaryDeployment) {
      alert("Î°§Î∞±Ìï† Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Í∞Ä ÏóÜÏäµÎãàÎã§.");
      return;
    }

    const confirmed = confirm(`${currentServiceCanaryDeployment.name} ÏÑúÎπÑÏä§Ïùò Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Î•º Î°§Î∞±ÌïòÏãúÍ≤†ÏäµÎãàÍπå?`);
    if (!confirmed) return;

    try {
      const response = await fetch(`${crdApiUrl}/api/v1/crd/service/${currentServiceCanaryDeployment.id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        throw new Error(`Î°§Î∞± ÏöîÏ≤≠ Ïã§Ìå®: ${response.status} ${response.statusText}`);
      }

      console.log('‚úÖ Î°§Î∞± ÏÑ±Í≥µ');
      alert("Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î°§Î∞±ÎêòÏóàÏäµÎãàÎã§!");
      
      // Î°§Î∞± ÌõÑ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      await fetchCurrentCanaryDeployments();
      
    } catch (error) {
      console.error("‚ùå Î°§Î∞± Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
      alert(`Î°§Î∞± Ïã§Ìå®: ${error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò'}`);
    }
  };

  const handleAgentDelete = async (canaryDeployment: CanaryDeployment) => {
    const confirmMessage = `'${canaryDeployment.name}' Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Î•º ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\n` +
      `ÏÑúÎπÑÏä§: ${canaryDeployment.name}\n` +
      `ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: ${canaryDeployment.namespace}\n` +
      `ÌòÑÏû¨ ÎπÑÏú®: ${canaryDeployment.ratio}%\n` +
      `Î≤ÑÏ†Ñ: ${canaryDeployment.commitHash?.join(', ') || 'N/A'}\n\n` +
      `‚Äª Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Îßå ÏÇ≠Ï†úÎêòÍ≥† Îã§Î•∏ Î∞∞Ìè¨Îäî ÏòÅÌñ•Î∞õÏßÄ ÏïäÏäµÎãàÎã§.`;
    
    const confirmed = confirm(confirmMessage);
    if (!confirmed) return;

    try {
      console.log('üóëÔ∏è Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú ÏãúÎèÑ:', canaryDeployment);
      
      const response = await fetch(`${crdApiUrl}/api/v1/crd/service/${canaryDeployment.id}`, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json',
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú Ïã§Ìå®: ${response.status} - ${errorText}`);
      }

      const result = await response.json();
      console.log('Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú API ÏùëÎãµ:', JSON.stringify(result, null, 2));
      
      // ÏÑ±Í≥µ Ï°∞Í±¥ÏùÑ Îçî Ïú†Ïó∞ÌïòÍ≤å Ï≤òÎ¶¨
      const isSuccess = result.success === true || 
                       result.success === "true" ||
                       (result.message && result.message.includes("ÏÇ≠Ï†ú ÏÑ±Í≥µ")) ||
                       (result.msg && result.msg.includes("ÏÇ≠Ï†ú ÏÑ±Í≥µ"));
      
      if (isSuccess) {
        console.log('‚úÖ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú ÏÑ±Í≥µ:', result);
        alert("Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Í∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!\nÎã§Î•∏Î•∏ Î∞∞Ìè¨Îäî Í∑∏ÎåÄÎ°ú Ïú†ÏßÄÎê©ÎãàÎã§.");
      } else {
        // Î©îÏãúÏßÄÎ•º Í∏∞Î∞òÏúºÎ°ú Ìïú Î≤à Îçî ÏÑ±Í≥µ Ï≤¥ÌÅ¨
        const message = result.message || result.msg || "";
        if (message.includes("ÏÑ±Í≥µ") || message.includes("success")) {
          console.log('‚úÖ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú ÏÑ±Í≥µ (Î©îÏãúÏßÄ Í∏∞Î∞ò):', result);
          alert(`Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨Í∞Ä ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§!\nÎ©îÏãúÏßÄ: ${message}\nÎã§Î•∏Î•∏ Î∞∞Ìè¨Îäî Í∑∏ÎåÄÎ°ú Ïú†ÏßÄÎê©ÎãàÎã§.`);
        } else {
          throw new Error(message || 'Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
      }
      
      // ÏÇ≠Ï†ú ÌõÑ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      setTimeout(async () => {
        await fetchCurrentCanaryDeployments();
      }, 1000);
      
    } catch (error) {
      console.error("‚ùå Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò Î∞úÏÉù:", error);
      
      let errorMessage = 'Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
      if (error instanceof Error) {
        errorMessage = `Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÇ≠Ï†ú Ïã§Ìå®: ${error.message}`;
      }
      
      alert(errorMessage);
    }
  };

  // useEffectÎäî fetchCurrentCanaryDeployments Ìï®Ïàò Ï†ïÏùò ÌõÑÏóê Î∞∞Ïπò
  // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïùò Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÉÅÌÉúÍ∞Ä Î≥ÄÍ≤ΩÎê† Îïå Ïä§ÏºÄÏ§Ñ Ï†ïÎ≥¥ÎèÑ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    if (currentServiceCanaryDeployment) {
      if (currentServiceCanaryDeployment.ratio !== undefined) {
        setCanaryRatio([currentServiceCanaryDeployment.ratio]);
      }
      
      // Í∏∞Ï°¥ ratioSchedules Î°úÎìú - Î∞±ÏóîÎìú triggerTimeÏùÑ delayMsÎ°ú Î≥ÄÌôò
      if (currentServiceCanaryDeployment.ratioSchedules && currentServiceCanaryDeployment.ratioSchedules.length > 0) {
        const convertedSchedules: RatioSchedule[] = currentServiceCanaryDeployment.ratioSchedules.map((schedule) => {
          // triggerTimeÏù¥ Ï†àÎåÄ ÏãúÍ∞ÑÏù∏ Í≤ΩÏö∞ ÏÉÅÎåÄ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
          const currentTime = Date.now();
          const delayMs = schedule.triggerTime ? Math.max(0, schedule.triggerTime - currentTime) : (schedule.delayMs || 0);
          return {
            delayMs: delayMs,
            newRatio: schedule.newRatio
          };
        });
        setRatioSchedules(convertedSchedules);
        setEnableSchedule(true);
      } else {
        setRatioSchedules([]);
        setEnableSchedule(false);
      }
    }
  }, [currentServiceCanaryDeployment]);

  // ÌÅ¥Îü¨Ïä§ÌÑ∞ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§Îäî useEffect
  useEffect(() => {
    const fetchClusters = async () => {
      try {
        const apiUrl = process.env.NEXT_PUBLIC_BACKEND_API_URL_CLUSTER || 'http://localhost:8082';
        const response = await fetch(`${apiUrl}/api/v1/cluster`);
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const result = await response.json();
        if (result && result.data) {
          const clustersWithAgent = result.data.map((cluster: ClusterInfo) => ({
            ...cluster,
            agentConnected: cluster.agentConnected ?? false
          }));
          setClusters(clustersWithAgent);
        } else {
          setClusters([]);
        }
      } catch (error) {
        console.error("Failed to fetch clusters:", error);
        setClusters([]);
      }
    };

    if (isLoggedIn) {
      fetchClusters();
    }
  }, [isLoggedIn]);

  // ÏÑ†ÌÉùÎêú ÌÅ¥Îü¨Ïä§ÌÑ∞Ïóê Îî∞Îùº ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const fetchNamespaces = async () => {
      if (!selectedClusterUuid) {
        setAvailableNamespaces([]);
        setSelectedNamespace(null);
        return;
      }
      
      try {
        const apiUrl = process.env.NEXT_PUBLIC_BACKEND_API_URL_CLUSTER || 'http://localhost:8082';
        const response = await fetch(`${apiUrl}/api/v1/cluster/namespaces?clusterId=${selectedClusterUuid}`);
        if (!response.ok) throw new Error('ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        
        const data: NamespaceListResponse = await response.json();
        setAvailableNamespaces(data.namespaces);
        setSelectedNamespace(null);
        setSelectedService(null);
        setOriginalVersion(null);
        setCanaryVersion(null);
      } catch (error) {
        console.error('ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
        setAvailableNamespaces([]);
      }
    };

    fetchNamespaces();
  }, [selectedClusterUuid]);

  // ÏÑ†ÌÉùÎêú ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§Ïóê Îî∞Îùº ÏÑúÎπÑÏä§ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const fetchServices = async () => {
      if (!selectedClusterUuid || !selectedNamespace) {
        setAvailableServices([]);
        setSelectedService(null);
        return;
      }
      
      try {
        const apiUrl = process.env.NEXT_PUBLIC_BACKEND_API_URL_CLUSTER || 'http://localhost:8082';
        const response = await fetch(`${apiUrl}/api/v1/cluster/services?clusterId=${selectedClusterUuid}&namespace=${selectedNamespace}`);
        if (!response.ok) throw new Error('ÏÑúÎπÑÏä§ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        
        const data: ServiceNameListResponse = await response.json();
        setAvailableServices(data.serviceNames.filter(serviceName => serviceName !== 'kubernetes'));
        setSelectedService(null);
        setOriginalVersion(null);
        setCanaryVersion(null);
      } catch (error) {
        console.error('ÏÑúÎπÑÏä§ Î™©Î°ùÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
        setAvailableServices([]);
      }
    };

    fetchServices();
  }, [selectedClusterUuid, selectedNamespace]);

  // ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïóê Îî∞Îùº ÎîîÌîåÎ°úÏù¥Î®ºÌä∏ Ï†ïÎ≥¥ Î∞è Î≤ÑÏ†Ñ ÏóÖÎç∞Ïù¥Ìä∏
  useEffect(() => {
    const fetchDeployments = async () => {
      if (!selectedClusterUuid || !selectedNamespace || !selectedService) {
        setDeployments([]);
        setAvailableVersions([]);
        setOriginalVersion(null);
        setCanaryVersion(null);
        return;
      }
      
      try {
        const apiUrl = process.env.NEXT_PUBLIC_BACKEND_API_URL_CLUSTER || 'http://localhost:8082';
        const response = await fetch(`${apiUrl}/api/v1/cluster/deployments?clusterId=${selectedClusterUuid}&namespace=${selectedNamespace}&serviceName=${selectedService}`);
        if (!response.ok) throw new Error('ÎîîÌîåÎ°úÏù¥Î®ºÌä∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        
        const data: DeploymentListResponse = await response.json();
        setDeployments(data.data);
        
        // Ïª®ÌÖåÏù¥ÎÑà Ïù¥ÎØ∏ÏßÄ ÌÉúÍ∑∏ÏóêÏÑú version Ï∂îÏ∂ú (Îã§ÌÅ¨Î¶¥Î¶¨Ï¶àÏôÄ ÎèôÏùºÌïú Î∞©Ïãù)
        const versions = new Set<string>();
        if (data.data && Array.isArray(data.data)) {
          data.data.forEach((deployment) => {
            if (deployment.containers && Array.isArray(deployment.containers)) {
              deployment.containers.forEach((container) => {
                if (container.image) {
                  const imageTag = container.image.split(':')[1] || 'latest';
                  versions.add(imageTag);
                }
              });
            }
          });
        }
        
        setAvailableVersions(Array.from(versions));
        setOriginalVersion(null);
        setCanaryVersion(null);
      } catch (error) {
        console.error('ÎîîÌîåÎ°úÏù¥Î®ºÌä∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§:', error);
        setDeployments([]);
        setAvailableVersions([]);
      }
    };

    fetchDeployments();
  }, [selectedClusterUuid, selectedNamespace, selectedService]);

  useEffect(() => {
    if (!isLoading && !isLoggedIn) {
      // ÌòÑÏû¨ ÌéòÏù¥ÏßÄÎ•º Î°úÍ∑∏Ïù∏ ÌõÑ Î¶¨Îã§Ïù¥Î†âÏÖò ÎåÄÏÉÅÏúºÎ°ú Ï†ÄÏû•
      localStorage.setItem('redirectAfterLogin', '/canary-deploy');
      router.push('/login');
    }
  }, [isLoggedIn, isLoading, router]);

  // Î°úÎî© Ï§ëÏù¥Í±∞ÎÇò Î°úÍ∑∏Ïù∏ÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ Îπà ÌôîÎ©¥ Î∞òÌôò
  if (isLoading || !isLoggedIn) {
    return <div></div>;
  }

  return (
    <div>
      <SidebarProvider>
        <AppSidebar />
        <SidebarToggleButton />

        <main className="flex-1 p-4 md:p-6">
          <div className="flex justify-end mb-4">
            <div className="group relative flex items-center">
              <Button variant="ghost" className="mr-2 cursor-pointer">user</Button>
              <Button variant="outline" onClick={handleLogout} className="absolute right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                Î°úÍ∑∏ÏïÑÏõÉ
              </Button>
            </div>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Canary Deploy</CardTitle>
            </CardHeader>
            <CardContent className="grid gap-4">
              <div className="flex justify-end mb-4">
                <div className="group relative flex items-center">
                  <Button variant="ghost" className="mr-2 cursor-pointer">user</Button>
                  <Button variant="outline" onClick={handleLogout} className="absolute right-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                    Î°úÍ∑∏ÏïÑÏõÉ
                  </Button>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <UiLabel htmlFor="cluster">ÌÅ¥Îü¨Ïä§ÌÑ∞</UiLabel>
                  <Select onValueChange={setSelectedClusterUuid} value={selectedClusterUuid || ''}>
                    <SelectTrigger id="cluster">
                      <SelectValue placeholder="ÌÅ¥Îü¨Ïä§ÌÑ∞ ÏÑ†ÌÉù" />
                    </SelectTrigger>
                    <SelectContent>
                      {(clusters || []).map(cluster => (
                        <SelectItem key={cluster.uuid} value={cluster.uuid}>{cluster.name}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <UiLabel htmlFor="namespace">ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§</UiLabel>
                  <Select onValueChange={setSelectedNamespace} value={selectedNamespace || ''} disabled={!selectedClusterUuid}>
                    <SelectTrigger id="namespace">
                      <SelectValue placeholder="ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§ ÏÑ†ÌÉù" />
                    </SelectTrigger>
                    <SelectContent>
                      {(availableNamespaces || []).map(ns => (
                        <SelectItem key={ns} value={ns}>{ns}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <UiLabel htmlFor="service">ÏÑúÎπÑÏä§</UiLabel>
                  <Select onValueChange={setSelectedService} value={selectedService || ''} disabled={!selectedNamespace}>
                    <SelectTrigger id="service">
                      <SelectValue placeholder="ÏÑúÎπÑÏä§ ÏÑ†ÌÉù" />
                    </SelectTrigger>
                    <SelectContent>
                      {(availableServices || []).map(svc => (
                        <SelectItem key={svc} value={svc}>{svc}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <UiLabel htmlFor="original-version">Ïπ¥ÎÇòÎ¶¨ Î≥¥ÎÇº Î≤ÑÏ†Ñ</UiLabel>
                  <Select onValueChange={setOriginalVersion} value={originalVersion || ''} disabled={!selectedService}>
                    <SelectTrigger id="original-version">
                      <SelectValue placeholder="Î≤ÑÏ†Ñ ÏÑ†ÌÉù" />
                    </SelectTrigger>
                    <SelectContent>
                      {(availableVersions || [])
                        .filter(version => version !== canaryVersion)
                        .map(version => (
                          <SelectItem 
                            key={version} 
                            value={version} 
                          >{version}</SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <UiLabel htmlFor="canary-version">Ïπ¥ÎÇòÎ¶¨ Î∞õÏùÑ Î≤ÑÏ†Ñ</UiLabel>
                  <Select onValueChange={setCanaryVersion} value={canaryVersion || ''} disabled={!selectedService || !originalVersion}>
                    <SelectTrigger id="canary-version">
                      <SelectValue placeholder="Î≤ÑÏ†Ñ ÏÑ†ÌÉù" />
                    </SelectTrigger>
                    <SelectContent>
                      {(availableVersions || [])
                        .filter(version => version !== originalVersion)
                        .map(version => (
                          <SelectItem 
                            key={version} 
                            value={version} 
                          >{version}</SelectItem>
                        ))}
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <UiLabel htmlFor="canary-ratio">Ïπ¥ÎÇòÎ¶¨ Ìä∏ÎûòÌîΩ ÎπÑÏú®: {canaryRatio[0]}%</UiLabel>
                  <Slider
                    id="canary-ratio"
                    min={0}
                    max={100}
                    step={5}
                    value={canaryRatio}
                    onValueChange={setCanaryRatio}
                    className="w-[60%]"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="flex items-center space-x-2">
                  <Switch
                    id="sticky-session"
                    checked={stickySession}
                    onCheckedChange={setStickySession}
                  />
                  <UiLabel htmlFor="sticky-session">Sticky Session ÌôúÏÑ±Ìôî</UiLabel>
                </div>
                
                <div className="flex items-center space-x-2">
                  <Switch
                    id="pod-scale"
                    checked={podScaleEnabled}
                    onCheckedChange={setPodScaleEnabled}
                  />
                  <UiLabel htmlFor="pod-scale">ÎπÑÏú®Ïóê Îî∞Î•∏ ÌååÎìú Ïàò Ï°∞Ï†ï</UiLabel>
                </div>
              </div>

              {/* RatioSchedule ÏÑ§Ï†ï ÏÑπÏÖò */}
              <div className="mt-6 p-4 border rounded-lg bg-gray-50">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-2">
                    <Switch
                      id="enable-schedule"
                      checked={enableSchedule}
                      disabled={!selectedClusterUuid || !selectedNamespace || !selectedService || !originalVersion || !canaryVersion || canaryRatio[0] === undefined}
                      onCheckedChange={(checked) => {
                        setEnableSchedule(checked);
                        if (!checked) {
                          setRatioSchedules([]);
                        }
                      }}
                    />
                    <UiLabel htmlFor="enable-schedule" className="flex items-center gap-2">
                      <Clock className="w-4 h-4" />
                      ÏãúÍ∞ÑÎ≥Ñ ÎπÑÏú® Ïä§ÏºÄÏ§ÑÎßÅ
                      {(!selectedClusterUuid || !selectedNamespace || !selectedService || !originalVersion || !canaryVersion || canaryRatio[0] === undefined) && (
                        <span className="text-xs text-red-500 ml-2">
                          (Í∏∞Î≥∏ ÏÑ§Ï†ïÏùÑ Î®ºÏ†Ä ÏôÑÎ£åÌïòÏÑ∏Ïöî)
                        </span>
                      )}
                    </UiLabel>
                  </div>
                  
                  {enableSchedule && (selectedClusterUuid && selectedNamespace && selectedService && originalVersion && canaryVersion && canaryRatio[0] !== undefined) && (
                    <div className="flex gap-2">
                      <Button
                        type="button"
                        variant="outline"
                        size="sm"
                        onClick={addRatioSchedule}
                        disabled={ratioSchedules.length >= 100}
                        className="flex items-center gap-2"
                      >
                        <Plus className="w-4 h-4" />
                        Ïä§ÏºÄÏ§Ñ Ï∂îÍ∞Ä ({ratioSchedules.length}/100)
                      </Button>
                    </div>
                  )}
                </div>

                {!selectedClusterUuid || !selectedNamespace || !selectedService || !originalVersion || !canaryVersion || canaryRatio[0] === undefined ? (
                  // Í∏∞Î≥∏ ÏÑ§Ï†ïÏù¥ ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÏùÑ ÎïåÎäî ÏïÑÎ¨¥Í≤ÉÎèÑ ÌëúÏãúÌïòÏßÄ ÏïäÏùå
                  null
                ) : enableSchedule && (
                  <div className="space-y-4">
                    <div className="text-sm text-gray-600 mb-4">
                      <p>üìÖ Î∞∞Ìè¨ ÏãúÏ†êÏóê ÎØ∏Î¶¨ Í≥ÑÌöçÎêú ÏãúÍ∞ÑÎ≥Ñ Ïπ¥ÎÇòÎ¶¨ Ìä∏ÎûòÌîΩ ÎπÑÏú® Î≥ÄÍ≤ΩÏùÑ Ïä§ÏºÄÏ§ÑÎßÅÌï©ÎãàÎã§.</p>
                      <p>üí° Ï¥àÍ∏∞ ÎπÑÏú®: {canaryRatio[0]}% ‚Üí ÏÑ§Ï†ïÎêú ÏãúÍ∞Ñ ÌõÑ Ïä§ÏºÄÏ§ÑÎêú ÎπÑÏú®Î°ú Î≥ÄÍ≤Ω</p>
                      <p>‚è±Ô∏è ÏßÄÏó∞ÏãúÍ∞ÑÏùÄ Î∞ÄÎ¶¨Ï¥à(ms) Îã®ÏúÑÎ°ú ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: 10000ms = 10Ï¥à)</p>
                      <p className="text-amber-600 text-xs mt-2">
                        ‚ö†Ô∏è Ï∞∏Í≥†: Ïä§ÏºÄÏ§ÑÏùÄ Î∞∞Ìè¨ ÏãúÏ†êÏóê ÏÑ§Ï†ïÎêòÎ©∞, Ïã§ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÏßÄ ÏïäÏäµÎãàÎã§.
                      </p>
                    </div>

                    {/* Ìèº Î∑∞Îßå Ïú†ÏßÄ */}
                    <div className="space-y-4">
                      {ratioSchedules.length === 0 ? (
                        <div className="text-center py-8 text-gray-500">
                          <TrendingUp className="w-8 h-8 mx-auto mb-2 opacity-50" />
                          <p>Ïä§ÏºÄÏ§ÑÏù¥ ÏóÜÏäµÎãàÎã§. &quot;Ïä§ÏºÄÏ§Ñ Ï∂îÍ∞Ä&quot; Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÏãúÍ∞ÑÎ≥Ñ ÎπÑÏú® Î≥ÄÍ≤ΩÏùÑ ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.</p>
                        </div>
                      ) : (
                        <div className="space-y-3">
                          <div className="font-medium text-sm flex items-center gap-2">
                            <TrendingUp className="w-4 h-4" />
                            Ïä§ÏºÄÏ§Ñ Î™©Î°ù ({ratioSchedules.length}Í∞ú)
                          </div>
                          
                          {/* Ï¥àÍ∏∞ ÏÉÅÌÉú ÌëúÏãú */}
                          <div className="flex items-center gap-4 p-3 bg-blue-50 rounded-lg border">
                            <div className="text-sm">
                              <span className="font-medium">ÏãúÏûë:</span> {canaryRatio[0]}%
                            </div>
                            <div className="text-xs text-gray-500">
                              ‚è∞ 0ms (Î∞∞Ìè¨ ÏßÅÌõÑ)
                            </div>
                          </div>

                          {/* Ïä§ÏºÄÏ§Ñ Ìï≠Î™©Îì§ */}
                          {ratioSchedules.map((schedule, index) => (
                            <div key={index} className="flex items-center gap-4 p-3 bg-white rounded-lg border">
                              <div className="flex-1 grid grid-cols-2 gap-4">
                                <div>
                                  <UiLabel className="text-xs text-gray-600">ÏßÄÏó∞ÏãúÍ∞Ñ (ms)</UiLabel>
                                  <Input
                                    type="number"
                                    min="1"
                                    value={schedule.delayMs}
                                    onChange={(e) => updateRatioSchedule(index, 'delayMs', parseInt(e.target.value) || 0)}
                                    placeholder="10000"
                                    className="h-8"
                                  />
                                  <div className="text-xs text-gray-500 mt-1">
                                    = {formatDelay(schedule.delayMs)}
                                  </div>
                                </div>
                                <div>
                                  <UiLabel className="text-xs text-gray-600">ÏÉàÎ°úÏö¥ ÎπÑÏú® (%)</UiLabel>
                                  <Input
                                    type="number"
                                    min="0"
                                    max="100"
                                    value={schedule.newRatio}
                                    onChange={(e) => updateRatioSchedule(index, 'newRatio', parseInt(e.target.value) || 0)}
                                    placeholder="50"
                                    className="h-8"
                                  />
                                </div>
                              </div>
                              <Button
                                type="button"
                                variant="outline"
                                size="sm"
                                onClick={() => removeRatioSchedule(index)}
                                className="flex items-center gap-1 text-red-600 hover:text-red-700"
                              >
                                <Trash2 className="w-4 h-4" />
                              </Button>
                            </div>
                          ))}

                          {/* Ïä§ÏºÄÏ§Ñ ÎØ∏Î¶¨Î≥¥Í∏∞ */}
                          {ratioSchedules.length > 0 && (
                            <div className="mt-4 p-3 bg-green-50 rounded-lg border">
                              <div className="text-sm font-medium mb-2 flex items-center gap-2">
                                <TrendingUp className="w-4 h-4" />
                                Ïä§ÏºÄÏ§Ñ ÎØ∏Î¶¨Î≥¥Í∏∞
                              </div>
                              <div className="text-xs space-y-1">
                                <div>0Ï¥à ÌõÑ: {canaryRatio[0]}% (Î∞∞Ìè¨ ÏßÅÌõÑ)</div>
                                {[...ratioSchedules].sort((a, b) => a.delayMs - b.delayMs).map((schedule, index) => (
                                  <div key={`preview-${index}`}>
                                    {formatDelay(schedule.delayMs)} ÌõÑ: {schedule.newRatio}%
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                )}
              </div>

              {/* ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïùò Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ ÏÉÅÌÉú */}
              {selectedService && selectedNamespace && (
                <div className="mt-6 p-4 border rounded-lg bg-gray-50">
                  <h3 className="text-lg font-semibold mb-3">ÌòÑÏû¨ ÏÑúÎπÑÏä§ ÏÉÅÌÉú</h3>
                  {currentServiceCanaryDeployment ? (
                    <div className="space-y-3">
                      <div className="flex items-center gap-2">
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                          üöÄ Canary Î∞∞Ìè¨ Ï§ë
                        </span>
                        <span className="text-sm text-gray-600">
                          ÎπÑÏú®: {currentServiceCanaryDeployment.ratio}%
                        </span>
                      </div>
                      
                      <div className="text-sm text-gray-600">
                        <p><strong>ÏÑúÎπÑÏä§:</strong> {currentServiceCanaryDeployment.name}</p>
                        <p><strong>ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§:</strong> {currentServiceCanaryDeployment.namespace}</p>
                        <p><strong>Î≤ÑÏ†Ñ:</strong> {currentServiceCanaryDeployment.commitHash?.join(' ‚Üí ') || 'N/A'}</p>
                        <p><strong>ÌÉÄÏûÖ:</strong> {currentServiceCanaryDeployment.serviceType}</p>
                        <p><strong>ÌååÎìú Ïä§ÏºÄÏùº:</strong> {currentServiceCanaryDeployment.podScale ? 'ÌôúÏÑ±Ìôî' : 'ÎπÑÌôúÏÑ±Ìôî'}</p>
                      </div>

                      {/* Ïä§ÏºÄÏ§Ñ Ï†ïÎ≥¥ ÌëúÏãú - Ìï≠ÏÉÅ ÌëúÏãú */}
                      <div className="mt-3 p-3 bg-white rounded border">
                        <div className="font-medium text-sm mb-2 flex items-center gap-2">
                          <Clock className="w-4 h-4" />
                          ÎπÑÏú® Ïä§ÏºÄÏ§ÑÎßÅ ÌòÑÌô©
                        </div>
                        {currentServiceCanaryDeployment.ratioSchedules && currentServiceCanaryDeployment.ratioSchedules.length > 0 ? (
                          <div>
                            <div className="text-xs text-green-600 mb-2 font-medium">
                              ‚úÖ {currentServiceCanaryDeployment.ratioSchedules.length}Í∞úÏùò Ïä§ÏºÄÏ§ÑÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§
                            </div>
                            {/* Ïã§Ï†ú Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ïÍ∞íÎì§ ÌëúÏãú */}
                            <div className="text-xs text-gray-600 space-y-1 bg-gray-50 p-2 rounded">
                              <div className="font-medium text-blue-600 mb-2">‚è∞ Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ïÍ∞í:</div>
                              {currentServiceCanaryDeployment.ratioSchedules
                                .map((schedule: {triggerTime?: number; delayMs?: number; newRatio: number}) => {
                                  // Î∞±ÏóîÎìúÏóêÏÑú triggerTimeÏúºÎ°ú Ïò¨ Í≤ΩÏö∞ Ï≤òÎ¶¨
                                  const displayTime = schedule.triggerTime && schedule.triggerTime > 0
                                    ? new Date(schedule.triggerTime).toLocaleString()
                                    : formatDelay(schedule.delayMs || 0);
                                  return { ...schedule, displayTime };
                                })
                                .sort((a: {triggerTime?: number; delayMs?: number}, b: {triggerTime?: number; delayMs?: number}) => {
                                  // triggerTimeÏù¥ ÏûàÏúºÎ©¥ Í∑∏Í±∏Î°ú, ÏóÜÏúºÎ©¥ delayMsÎ°ú Ï†ïÎ†¨
                                  const timeA = a.triggerTime || a.delayMs || 0;
                                  const timeB = b.triggerTime || b.delayMs || 0;
                                  return timeA - timeB;
                                })
                                .map((schedule: {displayTime: string; newRatio: number; triggerTime?: number; delayMs?: number}, index: number) => (
                                  <div key={index} className="flex justify-between items-center bg-white p-2 rounded border-l-2 border-blue-300">
                                    <div className="flex flex-col">
                                      <span className="text-xs text-gray-700">üìÖ Ïã§Ìñâ ÏãúÍ∞Ñ: {schedule.displayTime}</span>
                                      {schedule.triggerTime && (
                                        <span className="text-xs text-gray-500">triggerTime: {schedule.triggerTime}</span>
                                      )}
                                      {schedule.delayMs && (
                                        <span className="text-xs text-gray-500">delayMs: {schedule.delayMs}ms</span>
                                      )}
                                    </div>
                                    <span className="font-medium text-orange-600">‚Üí {schedule.newRatio}%</span>
                                  </div>
                                ))}
                            </div>
                          </div>
                        ) : (
                          <div>
                            <div className="text-xs text-gray-500 mb-2">
                              ‚ö™ ÏûêÎèô Ïä§ÏºÄÏ§Ñ ÏóÜÏùå (ÏàòÎèô Í¥ÄÎ¶¨)
                            </div>
                            <div className="text-xs text-gray-400 bg-gray-50 p-2 rounded">
                              üìù Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ïÍ∞í: ÏóÜÏùå<br />
                              üí° ÏÉà Î∞∞Ìè¨ Ïãú ÏãúÍ∞ÑÎ≥Ñ ÎπÑÏú® Î≥ÄÍ≤ΩÏùÑ ÏÑ§Ï†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.
                            </div>
                          </div>
                        )}
                      </div>

                      {/* ÎπÑÏú® ÏàòÏ†ï Ïä¨ÎùºÏù¥Îçî */}
                      <div className="space-y-2">
                        <UiLabel>ÎπÑÏú® ÏàòÏ†ï: {canaryRatio[0]}%</UiLabel>
                        <div className="flex items-center gap-4">
                          <Slider
                            min={0}
                            max={100}
                            step={5}
                            value={canaryRatio}
                            onValueChange={setCanaryRatio}
                            className="flex-1"
                          />
                          <Button 
                            size="sm" 
                            onClick={() => {
                              alert(
                                `ÎπÑÏú® ÏàòÏ†ïÏùÑ ÏúÑÌï¥ÏÑúÎäî ÏÉàÎ°ú Î∞∞Ìè¨Ìï¥Ï£ºÏÑ∏Ïöî.\n\n` +
                                `1. ÏïÑÎûò "ÏÇ≠Ï†ú" Î≤ÑÌäºÏùÑ ÎàåÎü¨ Í∏∞Ï°¥ Î∞∞Ìè¨Î•º ÏÇ≠Ï†úÌïòÏÑ∏Ïöî.\n` +
                                `2. ÏõêÌïòÎäî ÎπÑÏú®(${canaryRatio[0]}%)Î°ú "Î∞∞Ìè¨" Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÏÉàÎ°ú Î∞∞Ìè¨ÌïòÏÑ∏Ïöî.\n\n` +
                                `‚Äª Î∞±ÏóîÎìúÏóê PUT APIÍ∞Ä Íµ¨ÌòÑÎêòÎ©¥ Ï¶âÏãú ÏàòÏ†ïÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§.`
                              );
                            }}
                            disabled={canaryRatio[0] === currentServiceCanaryDeployment.ratio}
                          >
                            ÎπÑÏú® Ï†ÅÏö© (ÏïàÎÇ¥)
                          </Button>
                        </div>
                      </div>

                      {/* Î∞∞Ìè¨ Í¥ÄÎ¶¨ Î≤ÑÌäºÎì§ */}
                      <div className="flex gap-2 pt-2">
                        <Button 
                          variant="destructive" 
                          size="sm"
                          onClick={() => handleAgentDelete(currentServiceCanaryDeployment)}
                        >
                          üóëÔ∏è ÏÇ≠Ï†ú
                        </Button>
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => {
                            setCanaryRatio([currentServiceCanaryDeployment.ratio]);
                            // Í∏∞Ï°¥ Ïä§ÏºÄÏ§ÑÎèÑ Î≥µÏõê
                            if (currentServiceCanaryDeployment.ratioSchedules && currentServiceCanaryDeployment.ratioSchedules.length > 0) {
                              const convertedSchedules: RatioSchedule[] = currentServiceCanaryDeployment.ratioSchedules.map((schedule) => {
                                // triggerTimeÏù¥ Ï†àÎåÄ ÏãúÍ∞ÑÏù∏ Í≤ΩÏö∞ ÏÉÅÎåÄ ÏãúÍ∞ÑÏúºÎ°ú Î≥ÄÌôò
                                const currentTime = Date.now();
                                const delayMs = schedule.triggerTime ? Math.max(0, schedule.triggerTime - currentTime) : (schedule.delayMs || 0);
                                return {
                                  delayMs: delayMs,
                                  newRatio: schedule.newRatio
                                };
                              });
                              setRatioSchedules(convertedSchedules);
                              setEnableSchedule(true);
                            } else {
                              setRatioSchedules([]);
                              setEnableSchedule(false);
                            }
                          }}
                        >
                          ÌòÑÏû¨ ÏÑ§Ï†ïÏúºÎ°ú Î≥µÏõê
                        </Button>
                      </div>
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-600">
                        ‚ö™ Canary Î∞∞Ìè¨ ÏóÜÏùå
                      </span>
                      <p className="text-sm text-gray-500 mt-2">
                        ÏÑ†ÌÉùÎêú ÏÑúÎπÑÏä§Ïóê ÌôúÏÑ±ÌôîÎêú Canary Î∞∞Ìè¨Í∞Ä ÏóÜÏäµÎãàÎã§.
                      </p>
                    </div>
                  )}
                </div>
              )}

              {/* ÌòÑÏû¨ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ù ÏÑπÏÖò */}
              {selectedClusterUuid && currentCanaryDeployments.length > 0 && (
                <div className="mt-6 space-y-4">
                  <hr className="my-4" />
                  <h3 className="text-lg font-semibold">ÌòÑÏû¨ Ïπ¥ÎÇòÎ¶¨ Î∞∞Ìè¨ Î™©Î°ù</h3>
                  
                  {currentCanaryDeployments.map((canaryDeployment, index) => (
                    <Card key={index} className="p-4 bg-blue-50">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h4 className="font-medium mb-2">
                            Service: {canaryDeployment.name} (ID: {canaryDeployment.id})
                          </h4>
                          <p className="text-sm text-gray-600 mb-1">
                            ÎÑ§ÏûÑÏä§ÌéòÏù¥Ïä§: {canaryDeployment.namespace}
                          </p>
                          <p className="text-sm text-gray-600 mb-1">
                            ÌÉÄÏûÖ: {canaryDeployment.serviceType}
                          </p>
                          <p className="text-sm text-gray-600 mb-1">
                            Ìä∏ÎûòÌîΩ ÎπÑÏú®: {canaryDeployment.ratio}%
                          </p>
                          <p className="text-sm text-gray-600 mb-1">
                            ÌååÎìú Ïä§ÏºÄÏùº: {canaryDeployment.podScale ? 'ÌôúÏÑ±Ìôî' : 'ÎπÑÌôúÏÑ±Ìôî'}
                          </p>
                          <p className="text-sm text-gray-600 mb-2">
                            Î≤ÑÏ†Ñ: {canaryDeployment.commitHash ? canaryDeployment.commitHash.join(', ') : 'N/A'}
                          </p>
                          
                          {/* Ïä§ÏºÄÏ§Ñ Ï†ïÎ≥¥ ÌëúÏãú - Ìï≠ÏÉÅ ÌëúÏãú */}
                          <div className="mt-2 p-3 bg-white rounded border">
                            <div className="flex items-center gap-2 mb-2">
                              <Clock className="w-4 h-4 text-blue-500" />
                              <span className="text-sm font-medium">ÎπÑÏú® Ïä§ÏºÄÏ§ÑÎßÅ ÏÉÅÌÉú</span>
                            </div>
                            {canaryDeployment.ratioSchedules && canaryDeployment.ratioSchedules.length > 0 ? (
                              <div>
                                <div className="text-xs text-green-600 mb-3 font-medium">
                                  ‚úÖ {canaryDeployment.ratioSchedules.length}Í∞úÏùò Ïä§ÏºÄÏ§ÑÏù¥ ÌôúÏÑ±ÌôîÎêòÏñ¥ ÏûàÏäµÎãàÎã§
                                </div>
                                {/* Ïã§Ï†ú Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ïÍ∞íÎì§ ÌëúÏãú */}
                                <div className="text-xs text-gray-600 space-y-1 bg-gray-50 p-2 rounded">
                                  <div className="font-medium text-blue-600 mb-2">‚è∞ Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ïÍ∞í:</div>
                                  {canaryDeployment.ratioSchedules
                                    .map((schedule: {triggerTime?: number; delayMs?: number; newRatio: number}) => {
                                      // Î∞±ÏóîÎìúÏóêÏÑú triggerTimeÏúºÎ°ú Ïò¨ Í≤ΩÏö∞ Ï≤òÎ¶¨
                                      const displayTime = schedule.triggerTime && schedule.triggerTime > 0
                                        ? new Date(schedule.triggerTime).toLocaleString()
                                        : formatDelay(schedule.delayMs || 0);
                                      return { ...schedule, displayTime };
                                    })
                                    .sort((a: {triggerTime?: number; delayMs?: number}, b: {triggerTime?: number; delayMs?: number}) => {
                                      // triggerTimeÏù¥ ÏûàÏúºÎ©¥ Í∑∏Í±∏Î°ú, ÏóÜÏúºÎ©¥ delayMsÎ°ú Ï†ïÎ†¨
                                      const timeA = a.triggerTime || a.delayMs || 0;
                                      const timeB = b.triggerTime || b.delayMs || 0;
                                      return timeA - timeB;
                                    })
                                    .map((schedule: {displayTime: string; newRatio: number; triggerTime?: number; delayMs?: number}, index: number) => (
                                      <div key={index} className="flex justify-between items-center bg-white p-2 rounded border-l-2 border-blue-300">
                                        <div className="flex flex-col">
                                          <span className="text-xs text-gray-700">üìÖ Ïã§Ìñâ ÏãúÍ∞Ñ: {schedule.displayTime}</span>
                                          {schedule.triggerTime && (
                                            <span className="text-xs text-gray-500">triggerTime: {schedule.triggerTime}</span>
                                          )}
                                          {schedule.delayMs && (
                                            <span className="text-xs text-gray-500">delayMs: {schedule.delayMs}ms</span>
                                          )}
                                        </div>
                                        <span className="font-medium text-orange-600">‚Üí {schedule.newRatio}%</span>
                                      </div>
                                    ))}
                                </div>
                              </div>
                            ) : (
                              <div>
                                <div className="text-xs text-gray-500 mb-2">
                                  ‚ö™ ÏûêÎèô Ïä§ÏºÄÏ§Ñ ÏóÜÏùå (ÏàòÎèô Í¥ÄÎ¶¨)
                                </div>
                                <div className="text-xs text-gray-400 bg-gray-50 p-2 rounded">
                                  üìù Ïä§ÏºÄÏ§Ñ ÏÑ§Ï†ïÍ∞í: ÏóÜÏùå<br />
                                  üí° ÏÉà Î∞∞Ìè¨ Ïãú ÏãúÍ∞ÑÎ≥Ñ ÎπÑÏú® Î≥ÄÍ≤ΩÏùÑ ÏÑ§Ï†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.
                                </div>
                              </div>
                            )}
                          </div>
                        </div>
                        <Button 
                          variant="destructive" 
                          size="sm"
                          onClick={() => handleAgentDelete(canaryDeployment)}
                        >
                          ÏÇ≠Ï†ú
                        </Button>
                      </div>
                    </Card>
                  ))}
                </div>
              )}

              {/* Î¶¨ÏÜåÏä§ Ï†ïÎ≥¥ ÌëúÏãú ÏÑπÏÖò */}
              {deployments.length > 0 && (
                <div className="mt-6 space-y-4">
                  <hr className="my-4" />
                  <h3 className="text-lg font-semibold">Î¶¨ÏÜåÏä§ Ï†ïÎ≥¥</h3>
                  
                  {deployments.map((deployment, index) => (
                    <Card key={index} className="p-4">
                      <h4 className="font-medium mb-2">Deployment: {deployment.name}</h4>
                      <p className="text-sm text-gray-600 mb-2">Replicas: {deployment.replicas}</p>
                      
                      {deployment.containers && deployment.containers.length > 0 && (
                        <div className="mb-3">
                          <h5 className="font-medium text-sm mb-1">Ïª®ÌÖåÏù¥ÎÑà Ï†ïÎ≥¥</h5>
                          <ul className="list-disc pl-5 space-y-1 text-sm">
                            {deployment.containers.map((container, containerIndex) => (
                              <li key={containerIndex}>
                                <span className="font-medium">{container.name}</span>: {container.image}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}

                      {deployment.podLabels && Object.keys(deployment.podLabels).length > 0 && (
                        <div>
                          <h5 className="font-medium text-sm mb-1">Pod ÎùºÎ≤®</h5>
                          <ul className="list-disc pl-5 space-y-1 text-sm">
                            {Object.entries(deployment.podLabels).map(([key, value]) => (
                              <li key={key}>
                                <span className="font-medium">{key}</span>: {value}
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </Card>
                  ))}
                </div>
              )}

              <div className="flex justify-end gap-2">
                <Button variant="outline" onClick={handleRollback} disabled={!selectedClusterUuid || !selectedNamespace || !selectedService}>
                  Î°§Î∞±
                </Button>
                <Button 
                  onClick={handleDeploy} 
                  disabled={!selectedClusterUuid || !selectedNamespace || !selectedService || !originalVersion || !canaryVersion || canaryRatio[0] === undefined}
                >
                  {currentServiceCanaryDeployment ? 'ÏóÖÎç∞Ïù¥Ìä∏' : 'Î∞∞Ìè¨'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </main>
      </SidebarProvider>
    </div>
  );
} 